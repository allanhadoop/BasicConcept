# Source - https://www.nginx.com/blog/building-microservices-using-an-api-gateway/

# With a monolithic application there is just one set of (typically replicated, load‑balanced) endpoints. In a microservices architecture, 
however, each microservice exposes a set of what are typically fine‑grained endpoints. 

# Scenario - Simple smartphone mobile application, the product details page displays a lot of information, it includes other pages such as 
. Number of items in the shopping cart
. Order history
. Customer reviews
. Low inventory warning
--------------------------
When using a monolithic application architecture, a mobile client would retrieve this data by making a single REST call 
(GET api.company.com/productdetails/productId) to the application. A load balancer routes the request to one of N identical application 
instances. The application would then query various database tables and return the response to the client which is mobile app.

In contrast, when using the microservices architecture the data displayed on the product details page is owned by multiple microservices. 
. Shopping Cart Service – Number of items in the shopping cart
. Order Service – Order history
. Catalog Service – Basic product information, such as its name, image, and price
. Review Service – Customer reviews
so we may end up with 4 or more REST API endpoints.


--------------------------
# It is not good design for clients to talk directly to microservices.
# Problem with the client directly calling the microservices is that some might use protocols that are not web‑friendly. One service 
might use Thrift binary RPC while another service might use the AMQP messaging protocol. Neither protocol is particularly browser‑ or 
firewall‑friendly and is best used internally. An application should use protocols such as HTTP and WebSocket outside of the firewall.

* An API Gateway is a server that is the single entry point into the system. See diagram at link below to see how apigatway comes in middle
source - https://www.nginx.com/blog/building-microservices-using-an-api-gateway/

* The API Gateway encapsulates the internal system architecture and provides an API that is tailored to each client. It might have 
other responsibilities such as authentication, monitoring, load balancing, caching, request shaping and management, and static response 
handling.

* The API Gateway is responsible for request routing, composition, and protocol translation. All requests from clients first go through 
the API Gateway. It then routes requests to the appropriate microservice. The API Gateway will often handle a request by invoking 
multiple microservices and aggregating the results. It can translate between web protocols such as HTTP and WebSocket and web‑unfriendly 
protocols that are used internally.

* The API Gateway can also provide each client with a custom API. It typically exposes a coarse‑grained API for mobile clients. 
Consider, for example, the product details scenario. The API Gateway can provide an endpoint (/productdetails?productid=xxx) that 
enables a mobile client to retrieve all of the product details with a single request. The API Gateway handles the request by invoking 
the various services – product info, recommendations, reviews, etc. – and combining the results.

** Netflix example ** 
A great example of an API Gateway is the Netflix API Gateway. The Netflix streaming service is available on hundreds of different 
kinds of devices including televisions, set‑top boxes, smartphones, gaming systems, tablets, etc. Initially, Netflix attempted to 
provide a one‑size‑fits‑all API for their streaming service. However, they discovered that it didn’t work well because of the diverse 
range of devices and their unique needs. Today, they use an API Gateway that provides an API tailored for each device by running 
device‑specific adapter code. An adapter typically handles each request by invoking on average six to seven backend services. The 
Netflix API Gateway handles billions of requests per day.

*  A major benefit of using an API Gateway is that it encapsulates the internal structure of the application. Rather than having to 
invoke specific services, clients simply talk to the gateway. The API Gateway provides each kind of client with a specific API. This 
reduces the number of round trips between the client and application.











