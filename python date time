# source http://www.w3resource.com/python-exercises/date-time-exercise/index.php

# Datetime is a module that allows for handling of dates, times and datetimes (all of which are datatypes). 
# This means that datetime is both a top-level module as well as being a type within that module. 
import datetime 
print(datetime)
print(datetime.datetime)
Output -- 
<module 'datetime' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/datetime.so'>
<type 'datetime.datetime'>

---------------------------------------------
# Python time times %b, %B , %y etc at - https://docs.python.org/2/library/datetime.html
# datetime.strftime(format) - create formatted string for given time/date/datetime object according to specified format.
# Return a string representing the date and time, controlled by an explicit format string.

# datetime.strptime(date_string, format)
# it convert string to datetime object."
# This is equivalent to datetime(*(time.strptime(date_string, format)[0:6])).
---------------------------------------------
# date.weekday()
Return the day of the week as an integer, where Monday is 0 and Sunday is 6.
# date.isoweekday()
Return the day of the week as an integer, where Monday is 1 and Sunday is 7.

# Yield is a keyword that is used like return, except the function will return a generator.
----------------------------------------------
# To display  a) Current date and time b) Current year c) Month of year 
# d) Week number of the year e) Weekday of the week f) Day of year g) Day of the month h) Day of week 

import time, datetime
print(datetime.datetime.now()) # current date and time
print(datetime.date.today().strftime("%Y"))   #current year
print(datetime.date.today().strftime("%B"))   #month of the year
print(datetime.date.today().strftime("%W"))   #week number of the year
print(datetime.date.today().strftime("%w"))   #weekday of the year
print(datetime.date.today().strftime("%j"))   #day of the year
print(datetime.date.today().strftime("%A"))   #day of the week
----------------------------------------------
t  = 'Jan 1 2014 2:43PM'
print(datetime.date.today().strftime("%Y:%d:%m"))           #take date from system and convert to format specified by us
print(datetime.datetime.strptime(t,'%b %d %Y %I:%M%p'))     # identify format of data and let system convert to date
----------------------------------------------
# to determine whether a given year is a leap year.
def leap_year(y):  
    if y % 400 == 0:  
        return True  
    if y % 100 == 0:  
        return False  
    if y % 4 == 0:  
        return True  
    else:  
        return False  
print(leap_year(1900))  
print(leap_year(2004))  
----------------------------------------------
# to convert a string to datetime.
Sample String : Jan 1 2014 2:43PM
Exected Output : 2014-07-01 14:43:00
import datetime
print(datetime.datetime.strptime('Jan 1 2014 2:43PM' , '%b %d %Y %I:%M%p'))
----------------------------------------------
# to get the current time in Python
print(datetime.datetime.today().now().time())
----------------------------------------------
# to subtract five days from current date
Current Date : 2015-06-22
5 days before Current Date : 2015-06-17
from datetime import date, timedelta    #date and timedelta is the main module for subtraction , addition etc on date
print(date.today() - timedelta(5))
----------------------------------------------
# to convert unix timestamp string to readable date
Sample Unix timestamp string : 1284105682
Expected Output : 2010-09-10 13:31:22
print(datetime.datetime.fromtimestamp(int("1284105682")).strftime("%Y-%m-%d %H:%M:%S"))
----------------------------------------------
# to print yesterday, today, tomorrow
from datetime import date, timedelta
import datetime
print(date.today())
print(date.today()- timedelta(days=1))
print(date.today() + timedelta(days=1))
----------------------------------------------
# to convert the date to datetime (midnight of the date) 
from datetime import date, timedelta
import datetime
print(date.today())
print(datetime.datetime.combine(date.today(),datetime.datetime.min.time()))
Output -- 
2016-12-28
2016-12-28 00:00:00
----------------------------------------------
# to print next 5 days starting from today.
from datetime import date, timedelta
import datetime
print(date.today())
newdate = date.today()
c = 0
while c < 5:
    newdate += timedelta(days=1)
    print(newdate)
    c += 1
----second approach --
import datetime
base = datetime.datetime.today()
for x in range(0, 5):
      print(base + datetime.timedelta(days=x))
----------------------------------------------
# to add 5 seconds with the current time.
Sample input - 13:28:32.953088 
expected output - 13:28:37.953088
from datetime import date, timedelta
import datetime
print(datetime.datetime.now())
print(datetime.datetime.now() + timedelta(seconds=5,milliseconds=0,microseconds=0))
----------------------------------------------
# to convert Year/Month/Day to Day of Year
import datetime
today = datetime.datetime.now()
print(datetime.datetime(today.year,1,1))
day_of_year = (today - datetime.datetime(today.year, 1, 1)).days + 1
print(day_of_year)
Output -- 
2016-01-01 00:00:00
363
----------------------------------------------
# to get current time in milliseconds
import datetime, time
print(int(round(time.time() * 1000)))
----------------------------------------------
# to get week number.
Sample Date : 2015, 6, 16
print("week number ", datetime.datetime.today().strftime("%W"))
print("---second apprach---")
print("week number" , datetime.date(2016,12,28).isocalendar()[1])
#isocalendar()[0] is year , [1] is week and [2] is day
('week number ', '52')
---second apprach---
('week number', 52)
----------------------------------------------
# to find the date of the first Monday of a given week  
Sample Year and week : 2015, 50
Expected Output : Mon Dec 14 00:00:00 2015
print(time.asctime(time.strptime('2015 50 1', '%Y %W %w')))
print(time.asctime(time.strptime('2015 50 2', '%Y %W %w')))
Output -- 
Mon Dec 14 00:00:00 2015
Tue Dec 15 00:00:00 2015
----------------------------------------------
# Yield is a keyword that is used like return, except the function will return a generator.
# to select all the Sundays of a specified year.
from datetime import date, timedelta
def getsunday(year):
    dt = date(year, 1, 1)
    dt += timedelta(days=7 - dt.isoweekday())
    while year == dt.year:
        yield dt                   # this will send return value to for loop and then come back to this place
        dt += timedelta(days=7)

for s in getsunday(2018):
    print s
----------------------------------------------
# to add year(s) with a given date and display the new date.  
print(addYears(datetime.date(2015,1,1), -1))
sample output - 2014.1.1
print(addYears(datetime.date(2000,2,29),1)) 
2001-03-01

import datetime
from datetime import date
def addYears(d, years):
    try:
#Return same day of the current year        
        return d.replace(year = d.year + years)
    except ValueError:
#If not same day, it will return other, i.e.  February 29 to March 1 etc.
        print(date(d.year + years, 1, 1))                         #2001.1.1              
        print(date(d.year, 1, 1))                                 #2000.1.1
        print((date(d.year + years, 1, 1) - date(d.year, 1, 1)))  #this is leap year situation so will get number of days 366 days
        return d + (date(d.year + years, 1, 1) - date(d.year, 1, 1))   #here we are adding days to orginal date
print(addYears(datetime.date(2000,2,29),1))
----------------------------------------------
# to drop microseconds from datetime.
print(datetime.datetime.now().replace(microsecond=False))
----------------------------------------------
# to get days between two dates
from datetime import date
date1 = date(2000,2,28)  #Since this yyyy,m,d is already a date format , simple substraction will work 
date2 = date(2001,2,28)
def daysbetweendates(d1,d2):
    print(d1-d2)
print(daysbetweendates(date1, date2))
----------------------------------------------
# to get the date of the last Tuesday
from datetime import date  
from datetime import timedelta

today = date.today()  
print(today.isoweekday())
offset = (today.isoweekday() - 2) % 7               #so each day is slice of 7 meaning mod of 7 and Tuesday is at 2.
print(offset)                                       #this will get us current day - 2 as offset and then take mod of that 
last_tuesday = today - timedelta(days=offset)       #to get last Tuesday , now deduct that mod from current date
print(last_tuesday) 

----------------------------------------------
# to get next Tuesday from today.. 
today = date.today()  
print(today.isoweekday())
offset = (today.isoweekday() - 1) % 7   #so each day is slice of 7 meaning mod of 7 and if mod valus is 3 then today is 
                                        #thursday and 3 days left to complete week till Sunday.
offset += 2                             #here we are adding 3 and 2 (to get to second day which is Tuesday)
next_tuesday = today + timedelta(days=offset)   #to get next Tuesday , now add that mod from current date
print(next_tuesday) 
----------------------------------------------
# to test the third Tuesday of a month
Input  print(checkthursday('Jun 23, 2015'))
Expected output - False or True

from datetime import date, timedelta
import datetime
def checkthursday(s):
    d = datetime.datetime.strptime(s, '%b %d, %Y')
    if (d.isoweekday() == 2) and (14 < d.day <= 30 ) :
        return True
    else:
        return False
print(checkthursday('Jun 23, 2015'))
print(checkthursday('Jun 15, 2015'))
----------------------------------------------
# to get the last day of a specified year and month
import calendar
month = 3
year = 2016
print(calendar.monthrange(year,month)[-1])
----------------------------------------------
# to get the number of days of a given month an
print(calendar.monthrange(year,month))
----------------------------------------------
# to add a month with a specified date.
d = date(2014, 12, 25)
dys = calendar.monthrange(d.year, d.month)[1]
print(d + timedelta(days=dys))
Output-- 2015-01-25
----------------------------------------------
# to count the number of Monday of the 1st day of the month from 2015 to 2016  
import datetime
from datetime import datetime      ##here datetime type is required for if condition below 
countmonday = 0
for year in range(2015,2017):
    for month in range(1,13):
        if datetime(year,month,1).weekday() == 0:
            countmonday += 1
print(countmonday)
Output - 3
----------------------------------------------
# program to print a string five times, delay three seconds  
import time
s = "my string"
x  = 0
while x <5:
    x +=1
    print(s)
    time.sleep(3)
----------------------------------------------
# calculates the date six months from the current date using the datetime module  
import datetime
from datetime import date, timedelta
print(datetime.date)                  ##date is an attribute of datetime module
print(datetime.timedelta)             ##timedelta is an attribute of datetime module
cd = datetime.date.today() + datetime.timedelta(days=6*365/12)
print(cd).isoformat()
Output -- 
<type 'datetime.date'>
<type 'datetime.timedelta'>
2017-07-04
----------------------------------------------
# to create 5 fixed dates from a specified date over a given period. The difference between two dates will be 20  
Starting Date: 2016-08-01                         
Next 5 days :                                    
2016-08-21                                        
2016-09-10                                        
2016-09-30                                        
2016-10-20                                        
2016-11-09 
import datetime
from datetime import date, timedelta
sd = datetime.date(2016,8,1)
for i in range(1,6):
    sd = sd + datetime.timedelta(days=20)
    print(sd).isoformat()
---second approach---
def every_20_days(mydate):
    for _ in range(5):                       ##check syntax here
        mydate = mydate + datetime.timedelta(days=20)
        print('{d}'.format(d=mydate))          ## check syntax here d for date type
every_20_days(datetime.date(2016, 8, 
----------------------------------------------
# to get the dates 30 days before and after from the current date 
Current Date:  2016-09-20                         
30 days before current date:  2016-08-21          
30 days after current date :  2016-10-20 
from datetime import date, timedelta
current_date = date.today().isoformat()
days_before = (date.today() - timedelta(days=30)).isoformat()
days_after = (date.today() + timedelta(days=30)).isoformat()
print(days_after,days_before)
----------------------------------------------
# to get the GMT and local current time.
GMT: Tue, 20 Sep 2016 11:58:10 AM GMT                                   
Local: Tue, 20 Sep 2016 05:28:10 PM IST 
from time import gmtime, strftime
import time
# GMT: Tue, 20 Sep 2016 11:58:10 AM GMT
print("\nGMT: "+time.strftime("%a %d %b %Y %I:%M:%S %p %Z", time.gmtime()))
# Local: Tue, 20 Sep 2016 05:28:10 PM IST
print("\nLocal:"+ time.strftime("%a , %d %b %Y %I:%m:%S %p %Z\n")) 
----------------------------------------------
# to convert a date to the timestamp.
Expected output - 1474367659.0 
import time
import datetime
result = datetime.datetime.now()         ## now is function of datetime type which belongs to datetime module
print(result)
print(time.mktime(result.timetuple()))
----------------------------------------------
# to calculate a number of days between two dates.
import datetime
from datetime import date
def diff(d1,d2):
    return (d1-d2).days
print(diff(datetime.date(2016,10,12),datetime.date(2015,12,10)))
Output -- 307 
----------------------------------------------
# to calculate no of days between two datetimes.
import datetime
from datetime import datetime
def diff(d1,d2):
    return (d1-d2).days
print(diff(datetime(2016,10,12,0,0,0), datetime(2015,12,10,0,0,0)))
Output - 307 
----------------------------------------------
# to display the date and time in a human-friendly string.  
Expected output - Tue Sep 20 16:38:50 2016 (%a , %b %d %I:%m:%s %Y) 
print(time.ctime())
----------------------------------------------
# to convert a date to Unix timestamp
Expected output - Unix Timestamp:  1456422780.0  
import time
import datetime
dt = datetime.datetime(2016, 2, 25, 23, 23)
print(dt)
print(time.mktime(dt.timetuple()))
Output -- 
2016-02-25 23:23:00
1456471380.0
----------------------------------------------
# to calculate two date difference in seconds.
from datetime import datetime, time
#import datetime  #dont import this module.. we dont need it ..

def diff(dt2, dt1):
    
  deltadays = dt2 - dt1
  return deltadays.days * 24 * 3600 + deltadays.seconds

date1 = datetime.strptime('2015-01-01 01:00:00', '%Y-%m-%d %H:%M:%S') ##This conversion required since date is in yyy-mm-dd...format.
#std format for datetime moduleis yyyy, mm, dd, hh, mm, ss e.g. dt = datetime.datetime(2016, 2, 25, 23, 23)

date2 = datetime.now()       #here we are taking now from datetime type, not from datetime module.

print("\n%d seconds" %(diff(date2, date1)))
Output -- 63366534 seconds
----------------------------------------------
# to convert two date difference in days, hours, minutes, seconds  
from datetime import date, timedelta, datetime, time
date2 = datetime.strptime('2015-01-01 01:00:00', "%Y-%m-%d %H:%M:%S")
date1 = datetime.now()

def diff(d1,d2):
    deltadays = (d1 - d2)
    deltaseconds = deltadays.days * 24 * 3600  + deltadays.seconds
    return deltaseconds

def actualcalc(deltaseconds):
    minutes, seconds = divmod(deltaseconds, 60)   #divmod is mainly for date functions so minutes, seconds on left side is fixed
    hours, minutes = divmod(minutes,60)    #hours, minutes on left side is fixed
    days, hours = divmod(hours,24)         #days, hours on left side is fixed, cannot change
    return (days,hours,minutes,seconds)

print(actualcalc(diff(date1,date2)))
Output -- (733, 10, 25, 14)
----------------------------------------------
# to get last modified information of a file
Expected output - 2016-09-20 17:54:30
import os, time
def last_modified_fileinfo(filepath):
    filestat = os.stat(filepath)
    date = time.localtime((filestat.st_mtime))
    # Extract year, month and day from the date  
    year = date[0]
    month = date[1]
    day = date[2]
    # Extract hour, minute, second  
    hour = date[3]
    minute = date[4]
    second = date[5]
    # Year  
    strYear = str(year)[0:]
    # Month  
    if (month <= 9):
        strMonth = '0' + str(month)
    else:
        strMonth = str(month)
        # Date
    if (day <= 9):
        strDay = '0' + str(day)
    else:
        strDay = str(day)
    return (strYear + "-" + strMonth + "-" + strDay + " " + str(hour) + ":" + str(minute) + ":" + str(second))
print(last_modified_fileinfo('/Users/allangonsalves/Desktop/sample.html'))
Output -- 2016-12-28 11:8:56
---------------------------------------------
# to calculate an age in year
import datetime
from datetime import date, timedelta
d = datetime.date(2006,10,12)
cd = datetime.date.today()
t = (cd.month, cd.day) < (d.month, d.day)  #This is just True/False checkpoint 
print(t)
result = cd.year - d.year - ((cd.month, cd.day) < (d.month, d.day))
print(result)
Output -- 
True
10 
---------------------------------------------
# to get the current date time information
import time
import datetime
 
print("Time in seconds since the epoch: %s" % time.time())          # 1483473111.3
print("Current date and time: ", datetime.datetime.now())           # (2017, 1, 3, 11, 51, 51, 296944)
print("Alternate date and time: ", datetime.datetime.now().strftime("%y-%m-%d-%H-%M"))  # '17-01-03-11-51'
print("Current year: ", datetime.date.today().strftime("%Y"))                   # 2017
print("Month of year: ", datetime.date.today().strftime("%B"))                  # January
print("Week number of the year: ", datetime.date.today().strftime("%W"))        # 01
print("Weekday of the week: ", datetime.date.today().strftime("%w"))            # 2
print("Day of year: ", datetime.date.today().strftime("%j"))                    # 003
print("Day of the month : ", datetime.date.today().strftime("%d"))              # 03
print("Day of week: ", datetime.date.today().strftime("%A"))                    # Tuesday
Output -- as shown next to each line
---------------------------------------------
# to generate a date and time as a string
Expected output - In string: 2016-09-20 18:19:06 PM 
import datetime 
now = datetime.datetime.now()
print("# In string: " + now.strftime("%Y-%m-%d %H:%M:%S %p") + "\n")
Output --- # In string: 2017-01-03 11:56:45 AM
---------------------------------------------
# to display formatted text output of a month and start weeks on Sunday.  
Expected output - 
First Month - 2022                          
    January 2022                            
Su Mo Tu We Th Fr Sa                        
                   1                        
 2  3  4  5  6  7  8                        
 9 10 11 12 13 14 15                        
16 17 18 19 20 21 22                        
23 24 25 26 27 28 29                        
30 31  
import calendar
cal = calendar.TextCalendar(calendar.SUNDAY)
print(cal.prmonth(2022, 1))
# If we use MONDAY then calendar start week will be Monday as shown below
cal = calendar.TextCalendar(calendar.MONDAY)
print(cal.prmonth(2022, 1))
    January 2022
Mo Tu We Th Fr Sa Su
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
31
---------------------------------------------
# to print a 3-column calendar for an entire year.
import calendar  
cal = calendar.TextCalendar(calendar.SUNDAY)  
# year: 2022, column width: 2, lines per week: 1   
# number of spaces between month columns: 1  
# 3: no. of months per column.  
print(cal.formatyear(2022, 2, 1, 1, 3))
Output -- 
                              2022                                      
                                                                        
      January               February               March                
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa        
                   1         1  2  3  4  5         1  2  3  4  5        
 2  3  4  5  6  7  8   6  7  8  9 10 11 12   6  7  8  9 10 11 12        
 9 10 11 12 13 14 15  13 14 15 16 17 18 19  13 14 15 16 17 18 19        
16 17 18 19 20 21 22  20 21 22 23 24 25 26  20 21 22 23 24 25 26        
23 24 25 26 27 28 29  27 28                 27 28 29 30 31              
30 31                                                                   
                                                                        
       April                  May                   June                
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa        
                1  2   1  2  3  4  5  6  7            1  2  3  4        
 3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11        
10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18        
17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25        
24 25 26 27 28 29 30  29 30 31              26 27 28 29 30              
                                                                   
        July                 August              September              
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa        
                1  2      1  2  3  4  5  6               1  2  3        
 3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10        
10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17        
17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24        
24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30           
31                                                                      
                                                                        
      October               November              December              
Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa        
                   1         1  2  3  4  5               1  2  3        
 2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10        
 9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17        
16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24        
23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31        
30 31                
---------------------------------------------
# to display a calendar for a locale.
import calendar  
cal = calendar.LocaleTextCalendar(locale='en_AU.utf8')  
print(cal.prmonth(2025, 9)) 
Output --
 September 2025                                        
Mo Tu We Th Fr Sa Su                                     
 1  2  3  4  5  6  7                                     
 8  9 10 11 12 13 14                                     
15 16 17 18 19 20 21                                     
22 23 24 25 26 27 28                                     
29 30
---------------------------------------------
# to get the current week
Expected output -- Year 2017, Week Number 41, Day of the Week 4
import datetime
d = datetime.date(2017,10,12)
year, weeknum, dayofweek = d.isocalendar()
print(d.isocalendar())        #by default isocalendar gives us year, week number and day of the week 

print("Year %d, Week Number %d, Day of the Week %d" %(year,weeknum, dayofweek))
Output -- 
(2017, 41, 4)
Year 2017, Week Number 41, Day of the Week 4
---------------------------------------------
# to create an HTML calendar with data for a specific year and month.  
import calendar
htmlcal = calendar.HTMLCalendar(calendar.MONDAY)
print(htmlcal.formatmonth(2020, 12))
Output --
December 2020
Mon	Tue	Wed	Thu	Fri	Sat	Sun
 	1	2	3	4	5	6
7	8	9	10	11	12	13
14	15	16	17	18	19	20
21	22	23	24	25	26	27
28	29	30	31
---------------------------------------------
# display a list of the dates for the 2nd Saturday of every month for a given year. 
Expected output 
Jan:  9                                     
Feb: 13                                     
Mar: 12                                     
Apr:  9                                     
May: 14                                     
Jun: 11                                     
Jul:  9                                     
Aug: 13                                     
Sep: 10                                     
Oct:  8                                     
Nov: 12                                     
Dec: 10   
import calendar

def satevyr(yr):
    for m in range(1,13):
        cal = calendar.monthcalendar(yr,m)   #This will print calendar in multi-dimensional format , easy to use it in code
        print(cal)
        fweek = cal[0]
        sweek = cal[1]
        tweek = cal[2]
        if fweek[calendar.SATURDAY]:
            result = sweek[calendar.SATURDAY]
        else:
            result = tweek[calendar.SATURDAY]
        print(m,result)
satevyr(2017)
Output of line #582 above is as follows-
[[0, 0, 0, 0, 0, 0, 1], [2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, 29], [30, 31, 0, 0, 0, 0, 0]]
[[0, 0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [27, 28, 0, 0, 0, 0, 0]]
[[0, 0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 0, 0]]
[[0, 0, 0, 0, 0, 1, 2], [3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29, 30]]
[[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 0, 0, 0, 0]]
[[0, 0, 0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24, 25], [26, 27, 28, 29, 30, 0, 0]]
[[0, 0, 0, 0, 0, 1, 2], [3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29, 30], [31, 0, 0, 0, 0, 0, 0]]
[[0, 1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13], [14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27], [28, 29, 30, 31, 0, 0, 0]]
[[0, 0, 0, 0, 1, 2, 3], [4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 0]]
[[0, 0, 0, 0, 0, 0, 1], [2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, 29], [30, 31, 0, 0, 0, 0, 0]]
[[0, 0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 0, 0, 0]]
[[0, 0, 0, 0, 1, 2, 3], [4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31]]
Actual output of line #591 is as follows-
(1, 14)
(2, 11)
(3, 11)
(4, 8)
(5, 13)
(6, 10)
(7, 8)
(8, 12)
(9, 9)
(10, 14)
(11, 11)
(12, 9)
---------------------------------------------
# to display a simple, formatted calendar of a given year and month  
Expected Output -
|++++++ 09-2016 +++++|                      
|Su Mo Tu We Th Fr Sa|                      
|--------------------|                      
|             1  2  3|                      
| 4  5  6  7  8  9 10|                      
|11 12 13 14 15 16 17|                      
|18 19 20 21 22 23 24|                      
|25 26 27 28 29 30   |                      
|--------------------|
import calendar
month = 1
year = 2017
calendar.setfirstweekday(calendar.SUNDAY)
cal = calendar.monthcalendar(year, month)

if len(str(month)) == 1:
    month = '0%s' % month

# Header
print('|++++++ %s-%s +++++|' % (month, year))
print('|Su Mo Tu We Th Fr Sa|')
print('|--------------------|')

# display calendar
border = '|'
for week in cal:
    line = border

    for day in week:
        if day == 0:
            # 3 spaces for blank days
            line += '   '
        elif len(str(day)) == 1:
            line += ' %d ' % day
        else:
            line += '%d ' % day
    # remove space in last column
    line = line[0:len(line) - 1]
    line += border
    print(line)

print('|--------------------|\n')
---------------------------------------------
# to convert a string into datetime
Input  - '2016-05-12 02:25:00'  

from datetime import datetime  
date_obj = datetime.strptime('May 12 2016  2:25AM', '%b %d %Y %I:%M%p')  
print(date_obj)
Output -- 2016-05-12 02:25:00
---------------------------------------------
# to get a list of dates between two dates
from datetime import timedelta, date

def daterange(date1, date2):
    for n in range(int ((date2 - date1).days)+1):
        yield date1 + timedelta(n)

start_dt = date(2015, 12, 20)
end_dt = date(2016, 1, 1)
for dt in daterange(start_dt, end_dt):
    print(dt.strftime("%Y-%m-%d"))
Output --
2015-12-20
2015-12-21
2015-12-22
2015-12-23
2015-12-24
2015-12-25
2015-12-26
2015-12-27
2015-12-28
2015-12-29
2015-12-30
2015-12-31
2016-01-01

