# Source http://www.w3resource.com/python-exercises/python-conditional-statements-and-loop-exercises.php
------------------------------------------------
int(string, base) accepts an arbitrary base.

binary represents a number in base 2 (0 and 1)
octal represents a number in base 8 (0, 1, 2, 3, 4, 5, 6 and 7)
decimal is what is used in daily (western) life to talk about integers, which is base 10 (0 through to 9).
hexadecimal is base 16 (0 through to 9, then A, B, C, D, E, F).
e.g. - 
int('13', 5)  # one time 5, 3 times 1  == 8
int('123', 5)  # one time 5**2 (25), 2 times 5, 3 times 1  == 38
------------------------------------------------

#  find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 (both included)
output = []
for n in range(1500, 2000):
    if (n % 7 ==0 ) and ( n %5 ==0 ):
        output.append(str(n))
 
print(','.join(output))
Output -- 1505,1540,1575,1610,1645,1680,1715,1750,1785,1820,1855,1890,1925,1960,1995
------------------------------------------------
# to convert temperatures to and from celsius, fahrenheit.
[ Formula : c/5 = f-32/9 [ where c = temperature in celsius and f = temperature in fahrenheit ]
Expected Output : 
60°C is 140 in Fahrenheit
45°F is 7 in Celsius

temp = input("Input the  temperature you like to convert? (e.g., 45F, 102C etc.) : ")
degree = int(temp[:-1])
i_convention = temp[-1]

if i_convention.upper() == "C":
    result = int(round((9 * degree) / 5 + 32))
    o_convention = "Fahrenheit"
elif i_convention.upper() == "F":
    result = int(round((degree - 32) * 5 / 9))
    o_convention = "Celsius"
else:
    print("Input proper convention.")
    quit()
print("The temperature in", o_convention, "is", result, "degrees.")
------------------------------------------------
# to guess a number between 1 to 9. User is prompted to enter a guess. If the user guesses wrong then the prompt appears 
again until the guess is correct, on successful guess, user will get a "Well guessed!" message, and the program will exit.
while True:
    i = int(input("Guess number between 0 - 9 :"))
    if 0 < i < 9:
      print("well")
      break
---alternative using random module 
import random  
target_num, guess_num = random.randint(1, 10), 0  
while target_num != guess_num:  
    guess_num = int(input('Guess a number between 1 and 10 until you get it right : '))  
print('Well guessed!')
------------------------------------------------
# to construct the following pattern, using a nested for loop.
* 
* * 
* * * 
* * * * 
* * * * * 
* * * * 
* * * 
* * 
*
from __future__ import print_function
n = 5;
for n in range(0,n,1):   #range(start, stop, step) 
    for i in range(n):
        print ('* ',end=" ")
    print(' ')
for i in range(n,0,-1):
    for j in range(i):
        print('* ', end=" ")
    print('')
------------------------------------------------
# that accepts a word from the user and reverse it.
i = str(input("enter the word : "))
print(''.join(reversed(i)))
---second approach --
from __future__ import print_function
word = input("Input a word to reverse: ")
for char in range(len(word) - 1, -1, -1):
    print(word[char], end="")
------------------------------------------------
# to count the number of even and odd numbers from a series of numbers
Sample numbers : numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) 
Expected Output : 
Number of even numbers : 5
Number of odd numbers : 4
num =  (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple 
c = 0
d =0
for i in num:
    if (i% 2 == 0 ):
        c += 1
    else:
        d += 1
print("even ", c)
print("odd ", d)
------------------------------------------------
# prints each item and its corresponding type from the following list.
Sample List : datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12], {"class":'V', "section":'A'}]
datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12], {"class":'V', "section":'A'}]
for dt in datalist:
    print(type(dt))
Output -- 
<type 'int'>
<type 'float'>
<type 'complex'>
<type 'bool'>
<type 'str'>
<type 'tuple'>
<type 'list'>
<type 'dict'>
------------------------------------------------
# to get the Fibonacci series between 0 to 50
The Fibonacci Sequence is the series of numbers :
0, 1, 1, 2, 3, 5, 8, 13, 21, .... 
Every next number is found by adding up the two numbers before it.
Expected Output : 1 1 2 3 5 8 13 21 34
x,y = 0, 1
while y < 50:
    print(y)
    x, y = y, x+y
------------------------------------------------
# program which takes two digits m (row) and n (column) as input and generates a two-dimensional array. 
The element value in the i-th row and j-th column of the array should be i*j
Note :
i = 0,1.., m-1 
j = 0,1, n-1.
Test Data : Rows = 3, Columns = 4 
Expected Result : [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]
row = int(input("Enter number of rows : "))
col = int(input("Enter number of cols : "))

multi_list = [[0 for i in range(col)] for j in range(row) ]  #see syntax here.. rows goes across and columns with given row
print(multi_list)
print("--------")
for row in range(row):
    for col in range(col):
        multi_list[row][col] = row * col
print(multi_list)
Output --
Enter number of rows : 3
Enter number of cols : 5
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
--------
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 0], [0, 2, 4, 0, 0]]
------------------------------------------------
# program that accepts a sequence of lines (blank line to terminate) as input and 
prints the lines as output (all characters in lower case).
lines = []
while True:
    try:
        l = input()
        if l:
            lines.append(l.upper())       #lines needs to be list, cannt be tuple . we can append only to list
    except StandardError:
        print("no data found")
        break
        
for i in lines:
    print(i)
------------------------------------------------
# program which accepts a sequence of comma separated 4 digit binary numbers 
as its input and print the numbers that are divisible by 5 in a comma separated sequence
Sample Data : 0100,0011,1010,1001,1100,1001
Expected Output : 1010
items = []
num = [x for x in raw_input().split(',')]    #This syntax is to form list from user input
for p in num:
    x = int(p, 2)
    if x % 5:
        items.append(p)      
print(','.join(items))
Output -- 
User entered - 1100,1010,0011,0001,1111
Output -- 1100,0011,0001
------------------------------------------------
# program that accepts a string and calculate the number of digits and letters
Sample Data : Python 3.2
Expected Output :
Letters 6 
Digits 2
t = 'Python 2.7 '
d=c=0
for i in range(len(t)):
    if t[i].isdigit():
        d += 1
    elif t[i].isalpha():
        c += 1
    else:
        pass
print(d,c)
Output - (2,6)
------------------------------------------------
# to check the validity of password input by users.
Validation :
At least 1 letter between [a-z] and 1 letter between [A-Z].
At least 1 number between [0-9].
At least 1 character from [$#@].
Minimum length 6 characters.
Maximum length 16 characters.
import re  
p= input("Input your password")  
x = True  
while x:    
    if (len(p)<6 or len(p)>12):  
        break  
    elif not re.search("[a-z]",p):  
        break  
    elif not re.search("[0-9]",p):  
        break  
    elif not re.search("[A-Z]",p):  
        break  
    elif not re.search("[$#@]",p):  
        break  
    elif re.search("\s",p):  
        break  
    else:  
        print("Valid Password")  
        x=False  
        break  
if x:  
    print("Not a Valid Password")
------------------------------------------------
# to find numbers between 100 and 400 (both included) 
where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence.
items = []
for i in range(100,401):
    s = str(i)
    print(s[0],s[1],s[2])         #This is ok since we can now take [0], [1], [2] position which is not possible with i only because it is int
    # if (int(i[0]) % 2 == 0) and (int(i[1]) % 2 == 0) and (int(i[2]) % 2 ==0 ):  #this will not work since i is int
    if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0):    #this is fine since we can take [0] [1][2] postions of string
        items.append(s)
print(','.join(items))
Output -
('1', '0', '0')
('1', '0', '1')
('1', '0', '2')
------------------------------------------------
yr = input("Enter dog's year : ")               #user input 12.2
yri = int(input("Enter dog year in int :"))     #user input 12.2
print(yr)        # output - 12.2
print(yri)       # output - 12
------------------------------------------------
# program to calculate a dog's age in dog's years.
For the first two years, a dog year is equal to 10.5 human years. After that, each dog year equals 4 human years.
Input a dog's age in human years: 15                                    
The dog's age in dog's years is 73
h_age = int(input("Input a dog's age in human years: "))  
if h_age < 0:  
    print("Age must be positive number.")  
    exit()  
elif h_age <= 2:  
    d_age = h_age * 10.5  
else:  
    d_age = 21 + (h_age - 2)*4  
print("The dog's age in dog's years is", d_age)
Input - 15 
Output - 73
------------------------------------------------
# to check whether an alphabet is a vowel or consonant.
Input a letter of the alphabet: k   
k is a consonant
l = input("Input a letter of the alphabet: ")  
if l in ('a', 'e', 'i', 'o', 'u'):  
    print("%s is a vowel." % l)  
elif l == 'y':  
    print("Sometimes letter y stand for vowel, sometimes stand for consonant.")  
else:  
    print("%s is a consonant." % l)
------------------------------------------------
# to convert month name toa number of days.
List of months: January, February, March, April, May, June, July, August, September, October, November, December                                
Input the name of Month: February                                       
No. of days: 28/29 days 
print("List of months: January, February, March, April, May, June, July, August, September, October, November, December")  
month_name = input("Input the name of Month: ")  
if month_name == "February":  
    print("No. of days: 28/29 days")  
elif month_name in ("April", "June", "September", "November"):  
    print("No. of days: 30 days")  
elif month_name in ("January", "March", "May", "July", "August", "October", "December"):  
    print("No. of days: 31 day")  
else:  
    print("Wrong month name") 
------------------------------------------------
# to check a triangle is valid or not.
Input the length of side1: 5                                            
Input the length of side2: 4                                            
Input the length of side3: 6                                            
The triangle is valid
a = float(input("Input the length of side1: "))  
b = float(input("Input the length of side2: "))  
c = float(input("Input the length of side3: "))  
if (a < (b + c)) and (b < (a + c)) and (c < (a + b)):  
    print("The triangle is valid.")  
else:  
    print("The triangle is not valid.")
------------------------------------------------
# to check a string represent an integer or not
Input a string: Python                                                  
The string is not an integer.

text = input("Enter the text :")
text = text.strip()     #This will remove all spaces.
#if all(text[i] in '0123456789' for i in range((text[0:]))):  #This wil not work since range needs two factors
if all(text[i] in '0123456789' for i in range((len(text)))):
    print("This is an integer")
elif (text[0] in "+-") and all(text[i] in '0123456789' for i in range(1, len(text))):
    print("This is an integer")
else:
    print("The string is not an integer.")
    
-User input - "Python"
Output - The string is not an integer.
------------------------------------------------
# to check a triangle is equilateral, isosceles or scalene.
An equilateral triangle is a triangle in which all three sides are equal.
A scalene triangle is a triangle that has three unequal sides.
An isosceles triangle is a triangle with (at least) two equal sides.
Input lengths of the triangle sides:                                    
x: 6                                                                    
y: 8                                                                    
z: 12                                                                   
Scalene triangle 
print("Input lengths of the triangle sides: ")
x = int(input("x: "))
y = int(input("y: "))
z = int(input("z: "))
if x == y == z:
	print("Equilateral triangle")
elif x != y != z:
	print("Scalene triangle")
else:
	print("isosceles triangle")
------------------------------------------------
# program that reads two integers representing a month and day and prints the season for that month and day
Input the month (e.g. January, February etc.): july                     
Input the day: 31                                                       
Season is autumn 
month = input("Input the month (e.g. January, February etc.): ")  
day = int(input("Input the day: "))  
  
if month in ('January', 'February', 'March'):  
    season = 'winter'  
elif month in ('April', 'May', 'June'):  
    season = 'spring'  
elif month in ('July', 'August', 'September'):  
    season = 'summer'  
else:  
    season = 'autumn'  
  
if (month == 'March') and (day > 19):  
    season = 'spring'  
elif (month == 'June') and (day > 20):  
    season = 'summer'  
elif (month == 'September') and (day > 21):  
    season = 'autumn'  
elif (month == 'December') and (day > 20):  
    season = 'winter'  
  
print("Season is",season)
------------------------------------------------
# to find the median of three values
Input first number: 15                                                  
Input second number: 26                                                 
Input third number: 29                                                  
The median is 26.0

a = float(input("Input first number: "))  
b = float(input("Input second number: "))  
c = float(input("Input third number: "))  
if a > b:  
    if a < c:  
        median = a  
    elif b > c:  
        median = b  
    else:  
        median = c  
else:  
    if a > c:  
        median = a  
    elif b < c:  
        median = b  
    else:  
        median = c  
print("The median is", median)
------------------------------------------------
#  to get next day of a given date.
Input a year: 2016                                                      
Input a month [1-12]: 08                                                
Input a day [1-31]: 23                                                  
The next date is [yyyy-mm-dd] 2016-8-24


year = int(input("Input a year: "))  
  
if (year % 400 == 0):  
    leap_year = True  
elif (year % 100 == 0):  
    leap_year = False  
elif (year % 4 == 0):  
    leap_year = True  
else:  
    leap_year = False  
  
month = int(input("Input a month [1-12]: "))  
  
if month in (1, 3, 5, 7, 8, 10, 12):  
    month_length = 31  
elif month == 2:  
    if leap_year:  
        month_length = 29  
    else:  
        month_length = 28  
else:  
    month_length = 30  
  
  
day = int(input("Input a day [1-31]: "))  
  
if day < month_length:  
    day += 1  
else:  
    day = 1  
    if month == 12:  
        month = 1  
        year += 1  
    else:  
        month += 1  
print("The next date is [yyyy-mm-dd] %d-%d-%d." % (year, month, day))  
------------------------------------------------
# to calculate the sum and average of n integer numbers 
print("Input some integers to calculate their sum and average. Input 0 to exit.")

count = 0
sum = 0.0
number = 1
while number != 0:
    number = int(input(""))
    sum = sum + number
    count += 1
if count == 0:
    print("Input some numbers")
else:
    print("Average and Sum of the above numbers are: ", sum / (count - 1), sum)
Ouput --
Input some integers to calculate their sum and average. Input 0 to exit.
10
20
20
0
('Average and Sum of the above numbers are: ', 16.666666666666668, 50.0)
------------------------------------------------    
# to create the multiplication table (from 1 to 10) of a number.
Input a number: 6                                                       
6 x 1 = 6                                                               
6 x 2 = 12                                                              
6 x 3 = 18                                                              
6 x 4 = 24                                                              
6 x 5 = 30                                                              
6 x 6 = 36                                                              
6 x 7 = 42                                                              
6 x 8 = 48                                                              
6 x 9 = 54                                                              
6 x 10 = 60 

n = int(input("Input a number: "))  
for i in range(1,11):                   # use for loop to iterate 10 times
   print(n,'x',i,'=',n*i) 
------------------------------------------------
# to print alphabet pattern 'A'.
Expected Output:
 ***                                                                   
 *   *                                                                  
 *   *                                                                  
 *****                                                                  
 *   *                                                                  
 *   *                                                                  
 *   *
-----Continue fron 17 - 30 at http://www.w3resource.com/python-exercises/python-conditional-statements-and-loop-exercises.php








