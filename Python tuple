# Source -http://www.w3resource.com/python-exercises/tuple/
# we cannot remove item from tuple, so convert tuple to list first 
----------------------------------------------------
# program to create a tuple
t = tuple()
print(t)
x = ()
print(x)
Output - 
() 
() 
----------------------------------------------------
# to create a tuple with different data types
tuplex = ("tuple", False, 3.2, 1)
print(tuplex)
Output -- ('tuple', False, 3.2, 1)
----------------------------------------------------
# to create a tuple with numbers and print one item.
t = 4,3,4,5,6
print(t)

oneitem = 4,        #check the syntax for one item tuple
print(oneitem)
Output - 
(4, 3, 4, 5, 6)
(4,)
----------------------------------------------------
# to unpack a tuple in several variables. 
t = 4,3,5
n1, n2,n3 = t    #num.of variable = num.of items in tuple -then unpack possible
print(n1,n2,n3)
Output - (4, 3, 5)
----------------------------------------------------
# to add an item in a tuple
t = 4,3,5
t1 = t + (9,)                  #adding item to tuple
print(t1)
t2 = t1[:1] +(11,10) + t1[:4]  #adding item at specific index
print(t2)
l1 = list(t2)                  #convert tuple to list
l1.append(30)
print(l1)
Output--
(4, 3, 5, 9)
(4, 11, 10, 4, 3, 5, 9)
[4, 11, 10, 4, 3, 5, 9, 30]
----------------------------------------------------
# to convert a tuple to a string
t = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')
print(''.join(t))
Output -- exercises
----------------------------------------------------
# to create the clone of a tuple.
from copy import deepcopy 
tuplex = ("HELLO", 5, [], True)
print(tuplex)
tuplex_clone = deepcopy(tuplex)
tuplex_clone[2].append(50)
print(tuplex_clone)
Output -- 
('HELLO', 5, [], True)
('HELLO', 5, [50], True)
----------------------------------------------------
from copy import deepcopy
t = ("hello",[],1,True)     #if we use tuple() then we cant use append so use just ()
c = deepcopy(t)
c[1].append(33)   #append is different from add. append meaning overwrite and add meaning add .
print(t)
print(c)
Output --
('hello', [], 1, True)
('hello', [33], 1, True)
----------------------------------------------------
# to find the repeated items of a tuple.
t = 2, 4, 5, 6, 2, 3, 4, 4, 7
print(t.count(4))
Output - 3
----------------------------------------------------
# to check whether an element exists within a tuple.
t = 2, 4, 5, 6, 2, 3, 4, 4, 7
print(6 in t)
Output - True
----------------------------------------------------
# to remove an item from a tuple
t = "w", 3, "r", "s", "o", "u", "r", "c", "e"
l = list(t)    #convert tuple to list for removal operation
l.remove("o")
t1 = tuple(l)  #convert list back to tuple and then print
print(t1)
Output -- 
('w', 3, 'r', 's', 'u', 'r', 'c', 'e')
----------------------------------------------------
# to find the index of an item of a tuple.
t = "w", 3, "r", "s", "o", "u", "r", "c", "e"
print(t.index("s"))   #output 3
print(t.index("o", 3, 6))  #define segment of tuple to be searched e.g. from 3 till 6 position
print(t.index("r",5))   #define from which position u wish to search e.g. 5
Output - -
3
4
6
----------------------------------------------------
# to find the length of a tuple
t = "w", 3, "r", "s", "o", "u", "r", "c", "e"
print(len(t))
Output  - 9 
----------------------------------------------------
# to convert a tuple to a dictionary. 
t = ((2, "w"),(3, "r"))
p = ((1,20),(2, 30))           #check syntax  there is no :
print(dict((y,x) for x,y in t))     
print(dict((x,y) for x,y in p))     
Output --
{'r': 3, 'w': 2}
{1: 20, 2: 30}
----------------------------------------------------
#  to unzip a list of tuples into individual lists.
l = [(1,2), (3,4), (8,9)]
print(list(zip(*l)))    #check one * for unzip
Output -- [(1, 3, 8), (2, 4, 9)]
----------------------------------------------------
# to reverse a tuple
x = ( "w3resource","test" )
p = ("arrow")
y = reversed(x)
print(tuple(y))
q = reversed(p)
print(tuple(q))
Output -- 
('test', 'w3resource')
('w', 'o', 'r', 'r', 'a')
----------------------------------------------------
# to convert a list of tuples into a dictionary. 
t  = [("x", 1), ("x", 2), ("x", 3), ("y", 1), ("y", 2), ("z", 1)]

print(dict((x,y) for x,y in t))    #This will not work since we have several values for x , y and z
#output of above will be   {'y': 2, 'x': 3, 'z': 1} which is not right .. use below approach
d = {}
for a, b in t:
	d.setdefault(a,[]).append(b)   # {'y': [1, 2], 'x': [1, 2, 3], 'z': [1]} . Here value is mini list in itself...
print (d)




