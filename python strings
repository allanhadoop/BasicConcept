# Source - http://www.w3resource.com/python-exercises/string/
-----------------------------------------
# delete "del" operation is not allowed on string so first transfer string to list then delete . e.g L = list(s) ; del(s[index]) 
-----------------------------------------
# to count the number of characters (character frequency) in a string for google.com
# Expected Result : {'o': 3, 'g': 2, '.': 1, 'e': 1, 'l': 1, 'm': 1, 'c': 1}
def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict
print(char_frequency('google.com'))
-----------------------------------------
# to get a string made of the first 2 and the last 2 chars from a given a string. If the string length 
# is less than 2, return instead of the empty string.
s = "W3resource"
def mystr(stg):
    if len(stg) < 2:
        return ' '
    return stg[0:2]+stg[-2:]
print(mystr(s))
Output --W3ce
-----------------------------------------
#  to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself
Sample String : 'restart'
Expected Result : 'resta$t'
SString = 'restart'
def logic(s):
    f = s[0]
    s = s.replace(f, '$')
    result = f + s[1:]
    return result
print(logic(SString))
Output -- resta$t
-----------------------------------------
# to get a single string from two given strings, separated by a space and swap the first two characters of each string
Sample String : 'abc', 'xyz' 
Expected Result : 'xyc abz'
s1 = 'abc'
s2 = 'xyz'
def swap(t1,t2):
    r1 = t2[0:2]+t1[2:]
    r2 = t1[0:2]+t2[2:]
    return r1, r2
print(swap(s1,s2))
Output -- ('xyc', 'abz')
-----------------------------------------
# to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' 
# instead. If the string length of the given string is less than 3, leave it unchanged.
s1 = 'abc'
s2 = 'string'
def logic(t1):
    if len(t1) < 3:
        return t1
    if t1[-3:] == 'ing':
        return t1+'ly'
    else:
        return t1+'ing'
print(logic(s1))
print(logic(s2))
Output --- 
abcing
stringly
-----------------------------------------
# Python function that takes a list of words and returns the length of the longest one.
l = ["allan", "ambergonsalbes", "orion", "fabinasas", "Gonsalves"]
def longest(feed):
    base = feed[0]
    for i in range(len(feed)):
        if len(feed[i]) > len(base):
            base = feed[i]
    return base
print(longest(l))
---second apparoach --This is building two dimensional list (with length and then word ) 
def getlongest(s):
    getlength = []
    for n in s:
        getlength.append((len(n),n))
    getlength.sort()
    return getlength[-1][1]
print(getlongest(["allangonsalves","amber","oriongonsalves","rickgonssdsdalves","fabinagonsalves"]))
Output -- rickgonssdsdalves
-----------------------------------------
# to remove the nth index character from a nonempty string. 
p = "allangonsalves"
l = list(p)
def delchar(s,t):
    del(s[t])
    return s
print(delchar(l,3))
---Second approach is --- 
p = "allangonsalves"
def delchar(s,index):
    f = s[:index]
    l = s[index+1:]
    return f+l
print(delchar(p,4))
-----------------------------------------
# to change a given string to a new string where the first and last chars have been exchanged
p = "allangonsalves"
def exchange(s): 
    return (s[-1:]+s[1:-1]+s[0])
print(exchange(p))
-----------------------------------------
# to remove the characters which have odd index values of a given string
p = "allangonsalves"
def oddremove(s):
    result = ' '
    for i in range(len(s)):
        if (i % 2 == 0):
           result += s[i]
    return result
print(oddremove(p))
-----------------------------------------
# to count the occurrences of each word in a given sentence.
mysentence = "This is what i wanted to say is that.."
def countwords(sent):
    mydict = dict()     # we will fill this dictionary object with keys and values
    words = sent.split() # {'This', 'is', 'what', 'i', 'wanted','to','say','is','that..'}
    for word in words:
        if word in mydict:
            mydict[word] += 1
        else:
            mydict[word] = 1
    return mydict
print(countwords(mysentence))
Output --- {'what': 1, 'to': 1, 'This': 1, 'is': 2, 'i': 1, 'say': 1, 'wanted': 1, 'that..': 1}
-----------------------------------------
# script that takes input from the user and displays that input back in upper and lower cases.
while True:
    try:
        myword = str(input("Enter the word : "))
        break
    except ValueError:
        print("you didnt enter string")
def upperlower(w):
    return w.upper(), w.lower()
print(upperlower(myword))
-----------------------------------------
# To accepts a comma separated sequence of words as input and prints the unique words in sorted form (alphanumerically).
Sample Words : "red, white, black, red, green, black"
Expected Result : black, green, red, white,red
items = input("Input comma separated sequence of words: ")
words = [word for word in items.split(",")]     #here, we are accepting string as input then making it list by syntax [WORD for ...]
print(",".join(sorted(list(set(words)))))
-----------------------------------------
# to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2).
def insert_end(str):
	sub_str = str[-2:]
	return sub_str * 4
print(insert_end('Python'))
print(insert_end('Exercises'))
Output --- 
onononon
eseseses
-----------------------------------------
# to get the first half of a specified string of even length.
def string_first_half(str):
	return str[: len(str) / 2]
print(string_first_half('Python'))
-----------------------------------------
# to reverses a string if it's length is a multiple of 4. 
s = "zallangonsal"
if (len(s) % 4 == 0):
    print(''.join(reversed(s)))
-----------------------------------------
# to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters.
word = "alANgonsalveSMan"
def upp(s):
    count = 0
    for letter in s[:4]:
        if letter.upper() == letter:
            count += 1
    if count >= 2:
        return s.upper()
    return s
print(upp(word))
-----------------------------------------
# to sort a string lexicographically
def sortlexi(strg):
    return (','.join(sorted(sorted(strg))))
print(sortlexi("w3resource"))
Output -- 3,c,e,e,o,r,r,s,u,w    # JOIN makes a string
---ANOTHER Approach -- Form a LIST if you dont use JOIN 
def lexicographi_sort(s):
    return (sorted(sorted(s),key=str.upper))
print(lexicographi_sort('w3resource'))
Output -- ['3', 'c', 'e', 'e', 'o', 'r', 'r', 's', 'u', 'w']
-----------------------------------------
# to remove a newline in Python
str1='Python Exercises\n'
print(str1)
print(str1.strip())
-----------------------------------------
# to check whether a string starts with specified characters. 
str1='Python Exercises\n'
print(str1.startswith("Py"))
Output -- True 
-----------------------------------------
# to display formatted text (width=50) as output.
import textwrap
sample_text = '''
  Python is a widely used high-level, general-purpose, interpreted, 
  dynamic programming language. Its design philosophy emphasizes 
  code readability, and its syntax allows programmers to express 
  concepts in fewer lines of code than possible in languages such 
  as C++ or Java. 
  '''
print(textwrap.fill(sample_text,width=50))
-----------------------------------------
# to remove existing indentation from all of the lines in a given text.
import textwrap
sample_text = '''
  Python is a widely used high-level, general-purpose, interpreted, 
  dynamic programming language. Its design philosophy emphasizes 
  code readability, and its syntax allows programmers to express 
  concepts in fewer lines of code than possible in languages such 
  as C++ or Java. 
  '''
print(textwrap.dedent(sample_text))
-----------------------------------------
# to add a prefix text to all of the lines in a string. 
import textwrap  
sample_text =''' 
    Python is a widely used high-level, general-purpose, interpreted, 
    dynamic programming language. Its design philosophy emphasizes 
    code readability, and its syntax allows programmers to express 
    concepts in fewer lines of code than possible in languages such 
    as C++ or Java. 
    '''  
text_without_Indentation = textwrap.dedent(sample_text)  
wrapped = textwrap.fill(text_without_Indentation, width=50)  
#wrapped += '\n\nSecond paragraph after a blank line.'  
final_result = textwrap.indent(wrapped, '> ')   
print(final_result)  
-----------------------------------------
# to print the following floating numbers upto 2 decimal places
n1 = 23.4343434
print("print this number {0}".format(n1))
print("--------")
print("print decimals %.2f" % n1)
Output -- 
print this number 23.4343434
--------
print decimals 23.43
-----------------------------------------
# to print the following floating numbers upto 2 decimal places with a sign. 
n1 = -23.4343434
print("print this number {0}".format(n1))
print("--------")
print("print decimals %+.2f" % n1)
Output - 
print this number -23.4343434
--------
print decimals -23.43
-----------------------------------------
# to print the following integers with zeros on the left of specified width
# to print the following integers with '*' on the right of specified width
i = 123
print '{0:0>6d}'.format(i)
print('{0:*<6d}'.format(i))
000123
123***
-----------------------------------------
# to display a number with a comma separator
y = 30000000
print("comma separator: {:,}".format(y));
Output -- 30,000,000
-----------------------------------------
# to format a number with a percentage
n = 5
print("left alignment {0: <10d}".format(n))
print("center alignment {0:^10d}".format(n))
print("right alignment {0: >10d}".format(n))
Output -- 
left alignment 5         
center alignment     5     
right alignment          5
-----------------------------------------
#  to count occurrences of a substring in a string. 
s = "allangonsalves facebook twitter facebook"
p = "facebook"
result = s.count(p)
print(result)
-----------------------------------------
# to display a number in left, right and center aligned of width 10.
x = 0.25  
print("Formatted Number with percentage: "+"{:.2%}".format(x));
-----------------------------------------
# program to reverse a string.
def reverse_string(str1):
    return ''.join(reversed(str1))
print()
print(reverse_string("abcdef"))
-----------------------------------------
#  to reverse words in a string
s = "allangonsalves facebook twitter"
l = list(s.split())
print(' '.join(reversed(l)))
--second approach --
def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))
print()
print(reverse_string_words("The quick brown fox jumps over the lazy dog."))
-----------------------------------------
# to strip a set of characters from a string
s = "allangonsalves facebook twitter"
p = "aon"
result = ''.join(l for l in s if l not in p)
print(result)
