##source http://www.w3resource.com/python-exercises/python-basic-exercises.php#EDITOR
-----------------------
#setup.py is a python file, which usually tells you that the module/package you are about to install have been 
#packaged and distributed with Distutils, which is the standard for 
#distributing Python Modules. setup.py is Python's answer to a multi-platform installer and make file
# use *args when you're not sure how many arguments might be passed to your function
# **kwargs allows you to handle named arguments that you have not defined in advance
**: exponentiation
^: exclusive-or (bitwise)
%: modulus
//: divide with integral result (discard remainder)
-----------------------
# "functools" module is for higher-order functions: Example reduce can be used to sum up positive integers
-----------------------
# Python supports the creation of anonymous functions (i.e. functions 
# that are not bound to a name) at runtime, using a construct called "lambda"
-----------------------
from math import pi
r = float(input("enter radius:"))
area = (pi * ( r**2))
print(area)
------------------------
from datetime import datetime
print(datetime.now().strftime("%Y-%d-%m  %H:%M:%S"))
------------------------
numbers = input("enter some comma separated numbers :")
list = numbers.split(",")
tuple = tuple(list)
print('list',list)
print('Tuple', tuple)
------------------------
filename = input("enter file name :")
f_extension = filename.split(".")
print("your file extension is:" + (f_extension[-1])) 
------------------------
color_list = ["red","blue","black","grey"]
print("print first and last color fron list -- %s %s" % (color_list[0],color_list[-1]))
------------------------
exam_start_date = (11,12,2016)
print("Examination start date is : %i / %i / %i" %exam_start_date )
------------------------
#Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn.

#Sample value of n is 5
#Expected Result : 615
n = int(input("enter the integer number :"))
n1 = int("%s" %n)
print(n1)     //5
n2 = int("%s%s" %(n,n))
print(n2)      //55
n3 = int("%i%i%i" %(n,n,n))
print(n3)      ///555
print(n1+n2+n3) //615
------------------------
print(round.__doc__)    //Print document of built-in function
------------------------
import calendar

m = int(input("enter month :"))
y = int(input("enter year :"))

print(calendar.month(y,m))    //this will show real calendar .. :) 
------------------------
print("""this is called docstrng """)
------------------------
from datetime import date
fdate = date(2016,12,1)
tdate = date(2012,12,1)
print((fdate-tdate).days) 
------------------------
#Python program to get the difference between a given number and 17, if the number is greater than 17 return double the absolute difference.
number = int(input("Enter the number : "))
def difference(number):
    if number <=17 :
        return 17 - number
    else:
        return (number - 17)* 2
print(difference(number))
---------------------------------
#Python program to test whether a number is within 100 of 1000 or 2000.
number = int(input("Enter the number : "))
def logic(num):
    return (abs(1000 - num) <= 100 ) or (abs(2000 - num) <= 100 )
print(logic(number))
---------------------------------
#Python program to calculate the sum of three given numbers, if the values are equal then return thrice of their sum
#below code will not work because number becomes tuple when we input data.. so we cann't use split function even if we make that number Str.
# so now t1 will be '(10' etc... so we cannt do math on it. 

number = str(input("Enter three numbers by comma separted : "))
def logic(num):
    t1 = (num.split(",")[0])      //'(10'
    t2 = (num.split(",")[1])      //' 20'
    t3 = (num.split(",")[2])      // ' 30)'
    if (t1 == t2 == t3 ):
        return (t1+t2+t3) * 3
    else:
        return t1
print(logic(number))
--therefore approach is as below ----------------------------------- 
t1 = (input("Enter first number: "))
t2 = (input("Enter second number: "))
t3 = (input("Enter third number: "))
def logic(t1,t2,t3):
    if (t1 == t2 == t3 ):
        return (t1+t2+t3) * 3
    else:
        return t1+t2+t3
print(logic(t1,t2,t3))
---------------------------------
#Python program to get a new string from a given string where "Is" has been added to the front. 
#If the given string already begins with "Is" then return the string unchanged
inputstr = str(input("Enter the string: " ))
def logic(instr):
    if (instr[:2] == "IS"):
        return instr
    else:
        return "IS"+instr
print(logic(inputstr))
---------------------------------
#Python program to get a string which is n (non-negative integer) xeros copies of a given string.
def makecopies(str, n):
    result = ' '
    for i in range(n):
        result = result + str
    return result
print(makecopies('abc',5))
---------------------------------
#Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user
import math
number = int(input("Enter either even or odd number : "))
mod = number % 2
def evenodd(yourinput):
    if ( yourinput == 0):
        return "You entered even number"
    else:
        return "You entered odd number "
print(evenodd(mod))
---------------------------------
#Python program to count the number 4 in a given list.
number = [4,5,22,4,56,7,8,4,4,4,4]
def countfour(yourinput):
    count = 0
    for i in range(len(yourinput)):
        if (yourinput[i] == 4):
            count = count + 1
    return count
print(countfour(number))
---------------------------------
#Python program to get the n (non-negative integer) copies of the first 2 characters of a given string. 
#Return the n copies of the whole string if the length is less than 2
mystr = str(input("Enter the string :"))
numberofcopies = int(input(("how many copies you want? :")))

def copies(input,copies):
    result = ' '
    if ((len(input)) < 2):
      for i in range(copies):
          result = result + input
      return result
    else:
      for i in range(copies):
        result = result + input[:2]
      return result
print copies(mystr, numberofcopies
---------------------------------
# Python program to test whether a passed letter is a vowel or not.
entered = input("Enter your character :")

def checkvowel(word):
    vowel = 'aeiou'
    return word in vowel
print(checkvowel(entered))
---------------------------------
# Python program to check whether a specified value is contained in a group of values
number = int(input("Enter number :"))
mylist = [1,3,6,3,5]
def checkvowel(n):
    return n in mylist
print(checkvowel(number))
---------------------------------
# Python program to create a histogram from a given list of integers. 

def histogram(getlist):
    for i in range(len(getlist)):
        result = ' '
        times = getlist[i]
        while times > 0:
            result = result + '*'
            times = times - 1
        print(result)
print(histogram([12,3,5,6,7]))

Output -- 
 **
 ***
 *****
 ******
 *******
---------------------------------
# Python program to concatenate all elements in a list into a string and return it
list = ['a','l','l','a','n']

def concat(myword):
    result =  ' '
    for element in myword:
        result += str(element)
    return result
print(concat(list))
---------------------------------
# Python program to print all even numbers from a given numbers list in 
# the same order and stop the printing if any numbers that come after 237 in the sequence.
numbers = [      
    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,   
    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,   
    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,   
    958,743, 527  
    ]

def process(list):
    for i in list:
        n = i % 2
        if ((n == 0 ) & (i <> 237)) :
            print(i)
        elif (i == 237):
            break
print(process(numbers))
---------------------------------
# Python program to print out a set containing all the colors from color_list_1 which are not present in color_list_2
list1 = set(['blue','black','brown','red'])
list2 = set(['black','red'])

print(list1.difference(list2))
----------------------------- 
# Compute the greatest common divisor (GCD) of two positive integers
def calculate(x,y):
    outout = 0
    if x % y == 0:
        return y
    else :
        for k in range(int(y),0 , -1):
            if x % k == 0 and y % k == 0:
                outout = k
                break
        return outout
print(calculate(10,25))   //answer 5 
---------------------------------
# Python program to get the least common multiple (LCM) of two positive integers.
def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm
print(lcm(4, 6))  //answer 12
----------------------------- 
# Python program to sum of two given integers. However, if the sum is between 15 to 20 it will return 20
def sumdef(x,y):
    sum = x + y
    if sum in range(15,20):
        return 20
    else:
        return sum
print(sumdef(9,10))
----------------------------- 
# Python program that will return true if the two given integer values are equal or their sum or difference is 5.
def sumdef(x,y):
    if ((x == 5) | (y == 5) | (abs(x-y) == 5) | ((x+y) ==5)):
        return True
    else:
        return False
print(sumdef(15,10))
-----------------------------
## Python program to add two objects if both objects are an integer type. 
n1 = input("Enter first integer :")
n2 = input("Enter second integer :")

def checkinstance(t1,t2):
    if not isinstance(t1, int) and isinstance(t2,int):
        raise TypeError("Input needs to be integer")
    return t1+t2
print(checkinstance(n1,n2))
----------------------------- 
# Python program to display your details like name, age, address in three different lines
def personal_details():
    name = "Simon"
    age =  19
    address = "Bangalore, Karnataka, India"
    print("Name: {0}\nAge: {1}\nAddress: {2}".format(name, age, address))
personal_details()
----------------------------- 
# Python program to solve (x + y) * (x + y)
x, y = 4, 3
result = x * x + 2 * x * y + y * y
print("({0} + {1}) ^ 2) = {2}".format(x, y, result))
----------------------------- 
# To compute the distance between the points (x1, y1) and (x2, y2). 
# http://www.purplemath.com/modules/distform.htm
import  math

point1 = [3, 1]
point2 = [1, 5]
def getdistance(t1, t2):
    return math.sqrt((t1[0]- t2[0])**2 + (t1[1] - t2[1])**2)
print(getdistance(point1,point2))
----------------------------- 
# To check whether a file exists. 
import os.path
open('abc.txt','r')
print(os.path.isfile('abc.txt'))
----------------------------- 
# To determine if a Python shell is executing in 32bit or 64bit mode on OS
import struct
print(struct.calcsize("P")* 8)
----------------------------- 
# to get OS name, platform and release information.
import os, platform
print(os.name, platform.release(),platform.system())
----------------------------- 
# to locate Python site-packages
import site
print(site.getsitepackages())
----------------------------- 
# to call an external command in Python
from subprocess import  call
call("cd")
----------------------------- 
# To get the path and name of the file that is currently executing
import os
print("current file details", os.path.realpath(__file__))
----------------------------- 
# to find out the number of CPUs using
import multiprocessing
print(multiprocessing.cpu_count())
----------------------------- 
#To parse a string to Float or Integer. 
s = "23.344"
print(float(s))
print(int(float(s)))
----------------------------- 
# To list all files in a directory in Python
from os import listdir
from os.path import isfile, join

files_list = [f for f in listdir('/Users/allangonsalves/Desktop') if isfile(join('/Users/allangonsalves/Desktop',f))]
print(files_list)
----------------------------- 
# to print without newline or space
from __future__ import  print_function
for i in range(0,20):
    print("*", end=' ')
output ---* * * * * * * * * * * * * * * * * * * * 
----------------------------- 
# to determine profiling of Python programs. A profile is a set of statistics that describes how often and for how long various 
# parts of the program executed. These statistics can be formatted into reports via the pstats module
import cProfile
def sum():
    print(1+2)
cProfile.run('sum()')
Output --
 ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 t1.py:3(sum)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
----------------------------- 
## Difference between *args and **kwargs.. (args is used - when you're not sure how many arguments might be passed to your function)
# **kwargs is used with name and value pair. 
def print_everything(*args):
    for count, thing in enumerate(args):
        print '{0}. {1}'.format(count, thing)
print_everything('apple', 'banana', 'cabbage')
Output -- 
0. apple
1. banana
2. cabbage
------ 
def table_things(**kwargs):
    for name, value in kwargs.items():
         print '{0} = {1}'.format(name, value)
table_things(apple = 'fruit', cabbage = 'vegetable')
Output -- 
cabbage = vegetable
apple = fruit
----------------------------- 
# to print to stderr.
from __future__ import print_function
import sys
def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
eprint("abc", "efg", "xyz", sep="--")
----------------------------- 
# to access environment variables
import os
print(os.environ)
print(os.environ['HOME'])
print(os.environ['PATH'])
----------------------------- 
# to get the current username
import getpass
print(getpass.getuser())
----------------------------- 
#  to find local IP addresses using Python's stdlib
import socket
print([l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] 
if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), 
s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, 
socket.SOCK_DGRAM)]][0][1]]) if l][0][0])
----------------------------- 
# to sum of the first n positive integers. So formula is n * ( n+1) / 2 
n = int(input("Input a number: "))
sum_num = (n * (n + 1)) / 2
print(sum_num)
----------------------------- 
# to convert height (in feet and inches) to centimeters. 
h = input("enter height in ft : ")
l = input("enter lentgh in inch :")

inchl = ( h * 12 )
cm = inchl * 2.54 + l

print("Your height in one print format is {0} ".format(cm))
print("Your height in second print format is %d cm" % cm)
----------------------------- 
# to convert the distance (in feet) to inches, yards, and miles
d_ft = int(input("Input distance in feet: "))
d_inches = d_ft * 12
d_yards = d_ft / 3.0
d_miles = d_ft / 5280.0

print("The distance in inches is %i inches." % d_inches)
print("The distance in yards is %.2f yards." % d_yards)
print("The distance in miles is %.4f miles." % d_miles)
-----------------------------
# to get an absolute file path.
import os
file = str(input("enter file name :"))
def path(filename):
    return os.path.abspath(filename)
print(path(file))
----------------------------- 
# to get file creation and modification date/times
import os.path, time
print(os.path.isfile("/Users/allangonsalves/Desktop/IMG_0865.JPG"))
print("Last modified: %s" % time.ctime(os.path.getmtime('/Users/allangonsalves/Desktop/IMG_0865.JPG')))
print("Created: %s" % time.ctime(os.path.getctime('/Users/allangonsalves/Desktop/IMG_0865.JPG')))
----------------------------- 
## to understand all symbols - 
// - means floor division - eg. 2.4 // 2 = 1.0 ; meaning ignore remainder ) 
a += b is same as a = a + b
----
x = [ 2, 3, 3]
x += [3]
print(x)    ## [ 2, 3, 3 ,3]
----https://learnpythonthehardway.org/book/ex37.html
----------------------------- 
# to sort three integers without using conditional statements and loops. 
n1 = 5
n2 = 8
n3 = 12
x = min(n1, n2, n3)
y = max(n1, n2, n3)
z = (n1 + n2 + n3) - x - y
print("Numbers in order %i %i %i" % (x ,y ,z))
----------------------------- 
# to sort files by date.
# The "glob" module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell,
import glob
import os

files = glob.glob("/Users/allangonsalves/Desktop/*.*")
files.sort(key=os.path.getctime)
print("\n".join(files))
-----------------------------
# What is JOIN operation 
S = '-'
seq = ("a","b","c")
print(S.join(seq))
Output - a-b-c
----------------------------- 
# The method stat() performs a stat system call on the given path
# https://www.tutorialspoint.com/python/os_stat.htm
import os , stat
info = os.stat('/Users/allangonsalves/Desktop/IMG_0855.JPG')
print(info)
----------------------------- 
#  to get a directory listing, sorted by creation date
from stat import S_ISREG, ST_CTIME, ST_MODE
import os, sys, time

#Relative or absolute path to the directory
dir_path = sys.argv[1] if len(sys.argv) == 2 else r'.'
print(dir_path)

#all entries in the directory w/ stats
data = (os.path.join(dir_path, fn)
            for fn in os.listdir(dir_path))
data = ((os.stat(path), path)
            for path in data)
# regular files, insert creation date
data = ((stat[ST_CTIME], path)
           for stat, path in data if S_ISREG(stat[ST_MODE]))

for cdate, path in sorted(data):
    print(time.ctime(cdate), os.path.basename(path))
    
----------------------------- 
# to get the details of math module. 
import math
print(dir(math))
Output -- 
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos',
 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign',
 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', '
factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isfinit
e', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2'
, 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 
'trunc']
----------------------------
# to calculate midpoints of a line
x1 = float(input("Enter first endpoint :"))
x2 = float(input("Enter last endpoint :"))
print((x1+x2)/2)
----------------------------
# to hash a word
soundex = [0, 1, 2, 3, 0, 1, 2, 0, 0, 2, 2, 4, 5, 5, 0, 1, 2, 6, 2, 3, 0, 1, 0, 2, 0, 2]

word = input("Input the word be hashed: ")
word = word.upper()

coded = word[0]
for a in word[1:len(word)]:
    i = 65 - ord(a)
    coded = coded + str(soundex[i])
 
print("The coded word is: " + coded)
----------------------------- 
# to get the copyright information.
import sys
print(sys.copyright)
----------------------------- 
# to get the command-line arguments (name of the script, the number of arguments, arguments) passed to a script.
import sys
print("Get name of the script from command line:", sys.argv[0])
print("get number of argument :", len(sys.argv))
print("Argument list:",str(sys.argv))
Output -----
('Get name of the script from command line:', '/Users/allangonsalves/PycharmProjects/sample/t1.py')
('get number of argument :', 1)
('Argument list:', "['/Users/allangonsalves/PycharmProjects/sample/t1.py']")
----------------------------- 
# to test whether the system is a big-endian platform or little-endian platform.
# Endianness refers to the sequential order used to numerically interpret a range of bytes in computer memory as a larger, 
# composed word value. It also describes the order of byte transmission over a digital link. Words may be represented 
# in big-endian or little-endian format.
import sys
print(sys.byteorder)
Output - 
Little 
----------------------------- 
# to find the available built-in modules.
import sys
import textwrap
module_name = ','.join(sorted(sys.builtin_module_names))
print(textwrap.fill(module_name, width=70))
Output --- 
__builtin__,__main__,_ast,_codecs,_sre,_symtable,_warnings,errno,excep
tions,gc,imp,marshal,posix,pwd,signal,sys,thread,xxsubtype,zipimport
----------------------------- 
# to get the size of an object in bytes. 
import sys
object = "allan"
print(sys.getsizeof(object))
Output -- 
45 
----------------------------- 
# to get the current value of the recursion limit
import sys
print(sys.getrecursionlimit())
Output---
1000
----------------------------- 
# to concatenate N strings
list  = ["first","second","third"]
print('-'.join(list))
Output -- 
first-second-third
----------------------------- 
# to calculate the sum over a container.
print(sum([10,20,20]))
Output -- 50
----------------------------- 
# to test if a certain number is greater than all numbers of a list.
list = [4,6,8,9,12]
print(all(x>1 for x in list))
print(all(x>12 for x in list))
Output -- 
True
False 
----------------------------- 
# to count the number occurrence of a specific character in a string.
s = "This is allan gonsalves"
print(s.count('a'))
# SO count is a funtion on string to count letters 
----------------------------- 
# to check if a file path is a file or a directory.
import os
myfile = "/Users/allangonsalves/Desktop/AMEX Folder"
if os.path.isfile(myfile):
    print("This is file")
elif os.path.isdir(myfile):
    print("This is directory")
else:
    print("none of above")
Output -- This is directory
----------------------------- 
# to get the ASCII value of a character.
print(ord("a"))
print(ord("@"))
Output -- 
97
64
----------------------------- 
#  to get the size of a file
import os
file_size = os.path.getsize("abc.txt")
----------------------------- 
# Given variables x=30 and y=20, write a Python program to print t "30+20=50"
x = 20
y = 30
print("%i + %i = %i" % (x, y, (x+y)))
----------------------------
# to create a copy of its own source code. 
print((lambda str='print(lambda str=%r: (str %% str))()': (str % str))())
Output -- print(lambda str='print(lambda str=%r: (str %% str))()': (str % str))()
----------------------------
# to swap two variables
a = 10
b = 20
print("before swap:a = %d , b= %d" %( a,b))
a , b = b , a
print("after swap:a = %d , b= %d" %( a,b))
-----------------------------
# to define a string containing special characters in various forms
print("\#{'}${\"}@/")
print("\#{'}${"'"'"}@/")
print(r"""\#{'}${"}@/""")
print('\#{\'}${"}@/')
print('\#{'"'"'}${"}@/')
print(r'''\#{'}${"}@/''')  
Output of all of the above lines is same as below 
\#{'}${"}@/
-----------------------------
# to get the identity of an object
o = object()
print(id(o))
Output -- 4373446816 
-----------------------------
# to convert a byte string to a list of integers.
x = b'allan'
print(list(x))
Output -- ['a', 'l', 'l', 'a', 'n']
-----------------------------
# to check if a string is numeric. In this code below, check if we can transform s into float, due to character, it will end up in either
# Value or Type error 
s = 'a2434'
try:
    i = float(s)
except (ValueError, TypeError):
    print("Not numeric")
-----------------------------
# to print the current call stack
import traceback
def f1():
    return abc()
def abc():
    traceback.print_stack()
f1()
Output -- 
  File "/Users/allangonsalves/PycharmProjects/sample/t1.py", line 9, in <module>
    f1()
  File "/Users/allangonsalves/PycharmProjects/sample/t1.py", line 4, in f1
    return abc()
  File "/Users/allangonsalves/PycharmProjects/sample/t1.py", line 7, in abc
    traceback.print_stack()
-----------------------------
# to list the special variables used within the language
s_var_names = sorted((set(globals().keys()) | set(__builtins__.__dict__.keys())) - set('_ names i'.split())) 
print( '\n'.join(' '.join(s_var_names[i:i+8]) for i in range(0, len(s_var_names), 8)) )
-----------------------------
# to get the system time. 
import time
print(time.ctime())
Output - Sun Dec 25 16:06:51 2016
-----------------------------
#  to clear the screen or terminal.
import os
import time
print(os.system('ls'))
time.sleep(2)
print(os.system('clear'))
-----------------------------
# to get the name of the host on which the routine is r
import socket
print(socket.gethostname())
Output -- Macbook-Pro.local
-----------------------------
# to access and print a URL's content to the console
from httplib import HTTPSConnection
conn = HTTPSConnection("sellallmyideas.com")
conn.request('GET',"/")
result = conn.getresponse()
print(result.read())
-----------------------------
# to get system command output. 
import subprocess
returned_text = subprocess.check_output("ls -l", shell=True, universal_newlines=True)
print(returned_text)
-----------------------------
# to get the effective group id, effective user id, real group id, a list of supplemental group 
# ids associated with the current process. 
import os
print(os.getegid(), os.geteuid(),os.getgroups())
----------------------------
#   to divide a path on the extension separator. 
import os
for names in [ 'test.txt', 'filename', '/user/system/test.txt', '/', '' ]:
    print("%s :" % names, os.path.splitext(names) )
Output -- 
('test.txt :', ('test', '.txt'))
('filename :', ('filename', ''))
('/user/system/test.txt :', ('/user/system/test', '.txt'))
('/ :', ('/', ''))
(' :', ('', ''))
----------------------------
# to retrieve file properties
import os
import time
file = '/Users/allangonsalves/Desktop/IMG_0855.JPG'
print(time.ctime(os.path.getsize(file)), __file__)
----------------------------
# to find path refers to a file or directory when you encounter a path name.
import os.path
for file in [__file__, os.path.dirname(__file__), '/', './broken_link']:
    print('File        :', file)
    print('Absolute    :', os.path.isabs(file))
    print('Is File?    :', os.path.isfile(file))
    print('Is Dir?     :', os.path.isdir(file))
    print('Is Link?    :', os.path.islink(file))
    print('Exists?     :', os.path.exists(file))
    print('Link Exists?:', os.path.lexists(file))
----------------------------
# to get numbers divisible by fifteen from a list using an anonymous function.
# Python supports the creation of anonymous functions (i.e. functions that 
# are not bound to a name) at runtime, using a construct called "lambda".
l = [13,44,45,15,150,20]
result = list(filter(lambda x : (x % 2 == 0), l))
print(result)
print("-----------")
g = lambda x: x**2
print(g(8))
Output ---- 
[44, 150, 20]
-----------
64
----------------------------
# to make file lists from current directory using a wildcard.
import glob
print(glob.glob('/Users/allangonsalves/Desktop/*.*'))
----------------------------
# to remove the first item from a specified list. 
l = ['red','blue',45,23]
print(l)
del l[1]
print(l)
Output -- 
['red', 'blue', 45, 23]
['red', 45, 23]
----------------------------
# to input a number, if it is not a number generate an error message.
# different types of exceptions - https://docs.python.org/2/library/exceptions.html
while True:
    try:
        n = int(input("Enter number only:"))
        break
    except ValueError:
        print("you didnt enter number")
----------------------------
# to filter the positive numbers from a list.
l = [-234,5,-343,454,3,4,5,656,-6]
result = list(filter(lambda y: y > 0 , l))
print(result)
print("--------")
g = lambda x : x > 0
for i in range(len(l)-1):
    if (g(l[i]) == True):
        print(l[i])
Output -- 
[5, 454, 3, 4, 5, 656]
--------
5
454
3
4
5
656
----------------------------
# to compute the product of a list of integers (without using for loop
import functools
l = [3,2,5,4]
g = reduce((lambda a , b : a + b) , l)
print(g)
Output --- 14
----------------------------
# to print Unicode characters.
str = u'\u0050\u0079\u0074\u0068\u006f\u006e \u0045\u0078\u0065\u0072\u0063\u0069\u0073\u0065\u0073 \u002d \u0077\u0033\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065' 
print(str)
Output -- Python Exercises - w3resource 
----------------------------
# to prove that two string variables of same value point same memory location
s1 = "Reader"
s2 = "Reader"
print(hex(id(s1)))
print(hex(id(s2)))
Output -- 
0x10085b300
0x10085b300
----------------------------
# to create a bytearray from a list. 
l = [ 12,32,"a",33,43, 90]
result = bytearray(l)
for i in result:
    print(i)
Output -- 
12
32
97
33
43
90
----------------------------
# to format a specified string to limit the number of characters to 8
var = "Allan Gonsalves"
print("%.8s" %var)
Output -- Allan Go
----------------------------
Python- tuples are immutable(cannot be change) whereas list can change. 
tup = ( 1,4,5,6)
list = [3, 45, 8]
dict = {"name": "james", "age":43 }
set(['blue','black','brown','red'])
------------------------
Python image processing using - numpy and scipy 
