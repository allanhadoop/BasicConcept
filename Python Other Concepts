# Source - https://wiki.python.org/moin/UsingAssertionsEffectively
List of all exceptions - https://www.tutorialspoint.com/python/python_exceptions.htm
-------------------------------------------------------------
# Assertions are a systematic way to check that the internal state of a program is as the programmer 
# expected, with the goal of catching bugs
def KelvinToFahrenheit(Temperature):
   assert (Temperature >= 0),"Colder than absolute zero!"
   return ((Temperature*100))

print KelvinToFahrenheit(273)
print int(KelvinToFahrenheit(505.78))
print KelvinToFahrenheit(-5)
Output --- Here is a function that converts a temperature from degrees Kelvin to degrees Fahrenheit. Since zero degrees
#Kelvin is as cold as it gets, the function bails out if it sees a negative temperature
27300
50578
AssertionError: Colder than absolute zero!
-------------------------------------------------------------
def calc(num):
    assert num >0, "enter number bigger than zero only"
    return num * 2

print(calc(5))
print(calc(-3))
Output ---
10
AssertionError: enter number bigger than zero only
-------------------------------------------------------------
try:
   You do your operations here;
   ......................
except ExceptionI:
   If there is ExceptionI, then execute this block.
except ExceptionII:
   If there is ExceptionII, then execute this block.
   ......................
else:
   If there is no exception then execute this block. 

-------------------------------------------------------------
try:
    file = open('test.txt',"w")
    file.write("data entered by user")
except IOError:
    print("file coulnt be opened")
else:
    print(file.read())
    file.close()
-------------------------------------------------------------
# The finally block is a place to put any code that must execute, whether the try-block raised an exception or not. 
try:
   You do your operations here;
   ......................
   Due to any exception, this may be skipped.
finally:
   This would always be executed.
   ......................
-------------------------------------------------------------
try:
    file = open('test.txt',"w")
    file.write("data entered by user")
except IOError:
    print("file coulnt be opened")
finally:
    print("we tried working on file but it failed")
Output -- 
we tried working on file but it failed
-------------------------------------------------------------
# User defined exceptions -- 
Here is an example related to RuntimeError. Here, a class is created that is subclassed from RuntimeError.
In the try block, the user-defined exception is raised and caught in the except block. The variable e is used to create an instance of 
the class Networkerror.

class Networkerror(RuntimeError):
   def __init__(self, arg):
      self.args = arg
       
try:
   raise Networkerror("Bad hostname")
except Networkerror,e:
   print e.args
Output--
('B', 'a', 'd', ' ', 'h', 'o', 's', 't', 'n', 'a', 'm', 'e')
-------------------------------------------------------------
Ramdon module -- Source - http://www.pythonforbeginners.com/random/how-to-use-the-random-module-in-python
import random
print(random.randint(0,10))
Output- 3 (program will generate any random init number
For larger number - use 
import random
print(random.random() * 100)
-------------------------------------------------------------
# to choose random element from list 
print(random.choice(['red','greeen','yellow']))
-------------------------------------------------------------
# The shuffle function, shuffles the elements in list in place, so they are in a random order.
from random import shuffle
x = [[i] for i in range(10)]        # see syntax of i and respective output
y = [j for j in range(10)]          # see syntax of j and respective output 
shuffle(x)
print(x)
shuffle(y)
print(y)
Output -- 
[[3], [1], [2], [8], [0], [4], [5], [7], [9], [6]]
[1, 8, 0, 7, 3, 9, 5, 6, 2, 4]
------------------------------------------------------------
# Generate a randomly selected element from range(start, stop, step)
for i in range(3):
    print(random.randrange(4,101,5))
Output -- 
49
9
14
------------------------------------------------------------
# Flip a coin -- 
import random
import itertools

my_dict = { 'heads':0, 'tails':0, 'neutral':0}
coinface = my_dict.keys()
for i in range(20):
    my_dict[ random.choice(coinface) ] += 1
print("heads",my_dict['heads'], "tails" , my_dict['tails'], "coin standup ", my_dict['neutral'])
Output -- 
('heads', 7, 'tails', 8, 'coin standup ', 5)
------------------------------------------------------------
# What is seed() ? 
# Random number generation isn't truly "random". It is deterministic, and the sequence it generates is dictated by the seed 
value you pass into random.seed. Typically you just invoke random.seed(), and it uses the current time as the seed value, which 
means whenever you run the script you will get a different sequence of values.
import random
random.seed()   #here program will take current time as seed value so new random sequence will be generated below
print(random.raninit(1,10) 
Output -- 3, 4 , 7, etc for each execution 
However if we put seed value then random number is same for the given seed 
random.seed(100) 
print(random.randinit(1.10))
Output -- 
2 ...so this will remain same for all execution unless we change seed to let's say seed(103) then it may be 4 
------------------------------------------------------------------------------------------------------------------------









