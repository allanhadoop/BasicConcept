# source http://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion.php

----------------------------------------------
#  to calculate the sum of a list of numbers.
def sumnow(l):
    if len(l) == 1:
        return l[0]
    else:
        return l[0] + sumnow(l[1:])     #here we are calling same function again but list is pointed to new number.
print(sumnow([2,5,3,2,10]))
----------------------------------------------
# to converting an Integer to a string in any base
def to_string(n,base):
   conver_this_to_String = "0123456789ABCDEF"
   if n < base:
      return conver_this_to_String[n]
   else:
      return to_string(n//base,base) + conver_this_to_String[n % base]
print(to_string(2835,16))
----------------------------------------------
# Python program of recursion list sum
Test Data : [1, 2, [3,4], [5,6]]
Expected Result : 21
def sumlists(l):
    total = 0
    for item in l:
        if type(item) == type([]):
            total = total + sumlists(item)
        else:
            total = total + item
    return total
print(sumlists([1,[3,4],[5,6],2]))
----------------------------------------------
#  to get the factorial of a non-negative integer
def fact(f):
    if f <= 1 :
        return f
    else:
        return f  * (fact(f - 1))   # 4 * (4-1) * (3-1) * (2-1) * 1
print(fact(5))
----------------------------------------------
# to solve the Fibonacci sequence using recursion.
def fibo(n):
    if n == 1 or n == 2:
        return 1
    else:
        return (fibo(n - 1) + (fibo(n - 2)))
print(fibo(7))
----------------------------------------------






