# Source - http://www.w3resource.com/python-exercises/re/index.php
# All symbols here -- https://www.tutorialspoint.com/python/python_reg_expressions.htm
# Regular expressions use the backslash character ('\') to indicate special 
# forms or to allow special characters to be used without invoking their special meaning.
# More details  - https://docs.python.org/2/library/re.html
----------------------------------------------------------
So basically , any long string can be broken into two pieces using any of the following special sequnce letters. 
e.g. entire string consists of (<string1>89<string2)) then it is possible to split this into 2 pieces using \d sequence.
similarly, if <string1>a<string2> This can also be broken using \w sequence . 
similarly , if <string1> <string2> This can be also broken using \s sequence.

\s Match a whitespace character: [ \t\r\n\f]
\S Match nonwhitespace: [^ \t\r\n\f]
. Match any character except newline
\d Match a digit: [0-9]
\D Match a nondigit: [^0-9]
\w Match a single word character: [A-Za-z0-9_]
\W Match a nonword character: [^A-Za-z0-9_]
$ Matches the end of the string or just before the newline at the end of the string
\$ matches the character '$'.
\b represents the backspace character but only at the beginning or end of a word
r'\bfoo\b' matches 'foo', 'foo.', '(foo)', 'bar foo baz' but not 'foobar' or 'foo3'.
\B matches the empty string, but only when it is not at the beginning or end of a word
r'py\B' matches 'python', 'py3', 'py2', but not 'py', 'py.', or 'py!'
----------------------------------------------------------
import re
text = 'The quick brown3 fox jumps over the lazy dog.'
print(re.findall(r"\b\w{5}\B", text))     #Output ['brown']   here \B means alphanumeric 3 at the end of brown is accepted
text = 'The quick brown fox jumps over the lazy dog.'
print(re.findall(r"\b\w{5}\b", text))     #Output ['quick', 'brown', 'jumps']. Here \b is backspace
----------------------------------------------------------
----- * matches zero or more, + matches one or more.
import re
print(re.findall(r'a\s*b', 'ab'))    #here \s is space . Ouput - [ab]
print(re.findall(r'a\s+b', 'ab'))    #there is no space, Output  - []
print(re.findall(r'a\s+b', 'a b'))   #there is space after a so now output is ['a b']
print(re.findall(r'\s+a\s*b', 'a b'))  #here no space before a so no atleast 1 hit so not print even if there is space before b . Output []
print(re.findall(r'\s*b', ' b'))     #there is space before b so found hit Output [' b']
---------------------------------------------------------- 
'*' (either-or-all)
Causes the resulting RE to match 0 or more repetitions of the preceding RE, 
as many repetitions as are possible. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s.
'+' (and-all)
Causes the resulting RE to match 1 or more repetitions of the preceding RE. 
ab+ will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’.
'?' (either-or-specific)
Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either ‘a’ or ‘ab’.
'.' (any character except new line)
(Dot.) In the default mode, this matches any character except a newline. 
'^' 
(Caret.) Matches the start of the string,
'$'
Matches the end of the string or just before the newline at the end of the string
---------------------------------------------------------- 
# to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9)  
import re
def is_allowed_specific_char(string):
    charRe = re.compile(r'[^a-zA-Z0-9.]')
    string = charRe.search(string)
    return not bool(string)                  #This 'not' means not True or not False
print(is_allowed_specific_char("ABCDEFabcdef123450")) 
print(is_allowed_specific_char("*&%@#!}{"))
Output -- 
True
False
---------------------------------------------------------- 
# program that matches a string that has an a followed by either no b's or more b's.  
import re
def textmatch(text):
    pattern = 'ab*?'
    if re.search(pattern,text):
        return 'Found a match'
    else:
        return 'No match found'
print(textmatch("a"))
print(textmatch("abc"))
print(textmatch("sd"))
Output -- 
Found a match
Found a match
No match found
---------------------------------------------------------- 
# program that matches a string that has an a followed by one or more b's. 
def textmatch(text):
    pattern = 'ab+?'
    if re.search(pattern,text):
        return 'Found a match'
    else:
        return 'No match found'

print(textmatch("a"))
print(textmatch("abc"))
print(textmatch("adb"))
Output -- 
No match found
Found a match
No match found
---------------------------------------------------------- 
# program that matches a string that has an a followed by zero or one 'b'  

def textmatch(text):
    pattern = 'ab??'
    if re.search(pattern,text):
        return 'Found a match'
    else:
        return 'No match found'
print(textmatch("a"))
print(textmatch("abc"))
print(textmatch("adb"))
Output -- 
Found a match
Found a match
Found a match
---------------------------------------------------------- 
# program that matches a string that has an a followed by three 'b'  
# {m}
Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not 
to match. For example, a{6} will match exactly six 'a' characters, but not five.
def textmatch(text):
    pattern = 'ab{3}?'
    if re.search(pattern,text):
        return 'Found a match'
    else:
        return 'No match found'

print(textmatch("a"))
print(textmatch("abbbc"))
print(textmatch("adbbb"))
Output -- 
No match found
Found a match
No match found
---------------------------------------------------------- 
# program that matches a string that has an a followed by two to three 'b'.  
def textmatch(text):
    pattern = 'ab{2,3}?'
    if re.search(pattern,text):
        return 'Found a match'
    else:
        return 'No match found'
print(textmatch("ab"))
print(textmatch("abbc"))
print(textmatch("abbbcc"))
Output -- 
No match found
Found a match
Found a match
---------------------------------------------------------- 
# to find sequences of lowercase letters joined with a underscore.  
import re
def textmatch(text):
    pattern = '^[a-z]+_[a-z]+$'             # ^ for match at beginning of the string and $ for end of the string
    if re.search(pattern,text):
        return 'Found a match'
    else:
        return 'No match found'
print(textmatch("aab_cbbbc"))
print(textmatch("aab_Abbbc"))
print(textmatch("aabbb_ccdee"))
Output -- 
Found a match
No match found
Found a match
---------------------------------------------------------- 
# that matches a string that has an 'a' followed by anything, ending in 'b'. 
def text_match(text):
    patterns = '^a.*?b$'
    if re.search(patterns, text):
        return 'Found a match!'
    else:
        return ('Not matched!')
print(text_match("asdfs"))
print(text_match("a#$%$#%$#%b"))
print(text_match("aabbbbc"))
print(text_match("aabAbbbc"))
print(text_match("ABCDEF"))
Output---
Not matched!
Found a match!
Not matched!
Not matched!
Not matched!
---------------------------------------------------------- 
# that matches a word at the beginning of a string
def text_match(text):
    patterns = '^\w+'
    if re.search(patterns, text):
        return 'Found a match!'
    else:
        return ('Not matched!')
print(text_match("The quick brown fox jumps over the lazy dog."))
print(text_match(" The quick brown fox jumps over the lazy dog."))
Output -- 
Found a match!
Not matched!
---------------------------------------------------------- 
{m}  
Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match. 
For example, a{6} will match exactly six 'a' characters, but not five.
----------------------------------------------------------
{m,n}
Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible. 
For example, a{3,5} will match from 3 to 5 'a' characters. Omitting m specifies a lower bound of zero, and 
omitting n specifies an infinite upper bound. 
As an example, a{4,}b will match aaaab or a thousand 'a' characters followed by a b, but not aaab.
----------------------------------------------------------
{m,n}?
Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match 
as few repetitions as possible. This is the non-greedy version of the previous qualifier.
----------------------------------------------------------
'\'
Either escapes special characters (permitting you to match characters like '*', '?', and so forth),
----------------------------------------------------------
[amk] will match 'a', 'm', or 'k'.
[0-5][0-9] will match all the two-digits numbers from 00 to 59, and [0-9A-Fa-f] will match any hexadecimal digit
[(+*)] will match any of the literal characters '(', '+', '*', or ')'
[^5] will match any character except '5', and [^^] will match any character except '^'
both [()[\]{}] and []()[{}] will both match a parenthesis.
zy? will match either ‘z’ or ‘zy’.
----------------------------------------------------------
A|B, where A and B can be arbitrary REs, creates a regular expression that will match either A or B.
(...) Matches whatever regular expression is inside the parentheses,
(?#...)A comment; the contents of the parentheses are simply ignored.
----------------------------------------------------------
(?<=...)
Matches if the current position in the string is preceded by a match for ... that ends at the current position.
m = re.search('(?<=abc)def', 'abcdef')
Output -- 'def'
----------------------------------------------------------
m = re.search('(?<=-)\w+', 'spam-egg')      #here \w+ is a word after -
Output -- 'egg'
----------------------------------------------------------
import re
m = re.search('(?<=-)\w+', 'abc-defgggff')
print(m.group())
Output ----defgggff
----------------------------------------------------------
import re
m = re.search('(?<=XYZ)\w+', 'abc-deXYZ1234')
print(m.group())
Output -- 1234
----------------------------------------------------------
import re
m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
print(m.group(0))       # The entire match Output -- Isaac Newton
print(m.group(1))       # The entire match Output -- Isaac
print(m.group(2))       # The entire match Output -- Newton
print(m.group(1,2))       # The entire match Output -- ('Isaac', 'Newton')
----------------------------------------------------------
 re.match() checks for a match only at the beginning of the string.  re.match("c", "abcdef")    # No match
 re.search() checks for a match anywhere in the string . re.search("c", "abcdef")   # Match
 Regular expressions beginning with '^' can be used with search() to restrict the match at the beginning of the string:
 re.search("^c", "abcdef")  # No match
 re.search("^a", "abcdef")  # Match
 
print(re.search('^A','Line1\nAllan-Line2\nSanJoseLine3', re.MULTILINE))   # Match.Here A is matched on second line 
----------------------------------------------------------
# Find all adverbs - 
text = "He was carefully disguised but captured quickly by police."
re.findall(r"\w+ly", text)           #here r is raw string notation
['carefully', 'quickly']
----------------------------------------------------------
# When one wants to match a literal backslash, it must be escaped in the regular expression. With raw string notation, 
# this means r"\\". Without raw string notation, one must use "\\\\", making the following lines of code functionally identical:
print(re.match(r"\\", r"\\"))      #Match
print(re.match("\\\\","\\"))       #Match
----------------------------------------------------------
# that matches a word at end of string, with optional punctuation  
def text_match(text):
    patterns = '\w+\S*$'
    if re.search(patterns, text):
        return 'Found a match!'
    else:
        return ('Not matched!')
print(text_match("The quick brown fox jumps over the lazy dog."))      # Match
print(text_match("The quick brown fox jumps over the lazy dog. "))     # No Match
print(text_match("The quick brown fox jumps over the lazy dog"))       # Match
----------------------------------------------------------
# that matches a word containing 'z'.
'\w*z.\w*'    -- So * means any word \w . z. (z dot) means - any character except newline and \w* means any word after that
----------------------------------------------------------
# that matches a word containing 'z', not start or end of the word. 
\Bz\B
----------------------------------------------------------
# to match a string that contains only upper and lowercase letters, numbers, and underscores 
'^[a-zA-Z0-9_]*$'     
("Python_Exercises_1"))    - Match 
("jumps over the lazy dog.") - No Match
----------------------------------------------------------
# where a string will start with 5.
'^5'  
----------------------------------------------------------
# to remove leading zeros from an IP address.
ip = 102.08.09.289
re.sub('\.[0]*', '.', ip)  # 102.8.9.289
----------------------------------------------------------
m = re.match(r"(\d+)\.(\d+)", "24.1632")
m.groups()
('24', '1632')
----------------------------------------------------------
# to check for a number at the end of a string.
print(re.match(r'.*[0-9]$','thisis allan 9'))
or
print(re.match(r'.*\d$','thisis allan 9'))
----------------------------------------------------------
# to search the numbers (0-9) of length between 1 to 3 in a given string 
INPUT = "Exercises number 1, 12, 13, and 345 are important" 
Expected output - 1, 12, 13, 345 
import re
m = re.finditer(r'([0-9]{1,3})',"Exercises number 1, 12, 13, and 345 are important")
for n in m:
    print(n.group(0))
----------------------------------------------------------
# to search some literals strings in a string
Sample text : 'The quick brown fox jumps over the lazy dog.' 
Searched words : 'fox', 'dog', 'horse'  
import re
patterns = [ 'fox', 'dog', 'horse' ]
text = 'The quick brown fox jumps over the lazy dog.'
for pattern in patterns: 
    if re.search(pattern,  text):
        print('Matched!', pattern)
    else:
        print('Not Matched!')
----------------------------------------------------------
# to search a literals string in a string and also find the location within the original string where the pattern occurs. 
Sample text : 'The quick brown fox jumps over the lazy dog.'  
Searched words : [ 'fox', 'dog', 'horse' ]
import re
patterns = [ 'fox', 'dog', 'horse' ]
text = 'The quick brown fox jumps over the lazy dog.'
for pattern in patterns:
    found = re.search(pattern,  text)
    print(found.start(), pattern)
    print(found.end(),pattern)
----------------------------------------------------------
# to find the substrings within a string
Input - 'Python exercises, PHP exercises, C# exercises'
Expected to find - 'exercises'
import re
s = 'Python exercises, PHP exercises, C# exercises'
ss = 'exercises'
for getstr in re.findall(ss,s):
    print('found %s' % getstr)
----------------------------------------------------------
# to find the occurrence and position of the substrings within a string.  
import re
text = 'Python exercises, PHP exercises, C# exercises'
pattern = 'exercises'
for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    print('Found "%s" at %d:%d' % (text[s:e], s, e))
Output --
Found "exercises" at 7:16
Found "exercises" at 22:31
Found "exercises" at 36:45
----------------------------------------------------------
# to replace whitespaces with an underscore and vice versa.
import re
text = 'Python Exercises'
text =text.replace (" ", "_")
print(text)
text =text.replace ("_", " ")
print(text)
Output --
Python_Exercises
Python Exercises
----------------------------------------------------------
# to extract year, month and date from a an url.
url1= "https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"  
import re
url = "https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"
print(re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url) )
Output - [('2016', '09', '02')]
----------------------------------------------------------
# to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.  
# \number -- Matches the contents of the group of the same number
od = "2026-01-02"
print(re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})','\\3-\\2-\\1',od))    #bracket before \d are required. e .g. (\d{4}) 
Output = 02-01-2026
----------------------------------------------------------
# to match if two words from a list of words starting with letter 'P'.  
# if you wish to search specific word from long string or sentence then use finditer function , 
# if you need to find some word from list that starts with any letter then use Match function
import re
l = ["Python PHP", "Java JavaScript","c c++"]
for w in l:
    m = re.match(r"(P.*)",w)
    c = re.match("(P\w+)\W(P\w+)",w)    #here \W is for white pace between Python and PHP
    if m:
        print(m.groups(0))
    if c:
        print(c.groups(0))
Output -- 
('Python PHP',)
('Python', 'PHP')
----------------------------------------------------------
# to separate and print the numbers of a given string  
* matches zero or more, + matches one or more.
import re
text = "Ten 10, Twenty 20, Thirty 30"
result = re.split("\D+", text)
for element in result:
    print(element)
Output- 
10
20
30
-----whereas if we do below then \d will match a digits to split the string..
import re
text = "crystal 10, amber 20, allan 30"
result = re.split("\d+", text)
for element in result:
    print(element)
Output -- 
crystal 
, amber 
, allan 
----------------------------------------------------------
# to find all words starting with 'a' or 'e' in a given string.  
import re
sen = "This is my aellan enormous world edge and all"
print(re.findall('[ae]\w+',sen))
Output - ['aellan', 'enormous', 'edge', 'and', 'all']
----------------------------------------------------------
# to separate and print the numbers and their position of a given string.  
import re
text = "The following example creates an 20 ArrayList with a capacity of 50 elements"
for num in re.finditer('\d+',text):
    print(num.group(),num.start())
Output --
('20', 33)
('50', 65)
----------------------------------------------------------
# to abbreviate 'Road' as 'Rd.' in a given string
import re
text = "21 Ramkrishna Road"
print(re.sub('Road$','Rd',text))
Output -- 21 Ramkrishna Rd
----------------------------------------------------------
# to replace all occurrences of space, comma, or dot with a colon  
import re
text = 'Python Exercises, PHP exercises.'
print(re.sub("[ ,.]", ":", text, 2))
Output -- Python:Exercises: PHP exercises.
----------------------------------------------------------
# to find all words which are at least 4 characters long in a string  
import re  
text = 'The quick brown fox jumps over the lazy dog.'  
print(re.findall(r"\b\w{4,}\b", text)) 
----------------------------------------------------------
# to convert camel case string to snake case string
def camel_to_snake(text):  
        import re  
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)  
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()  
print(camel_to_snake('PythonExercises'))  
Output -- python_exercises
----------------------------------------------------------
# to convert snake case string to camel case string
def snake_to_camel(word):
    import re
    return ''.join(x.capitalize() or '_' for x in word.split('_'))
print(snake_to_camel('python_exercises')) 
Output -- PythonExercises
----------------------------------------------------------
# to extract values between quotation marks of a string  
import re  
text1 = '"Python", "PHP", "Java"'  
print(re.findall(r'"(.*?)"', text1))
Output -- ['Python', 'PHP', 'Java']
----------------------------------------------------------
# to remove multiple spaces in a string.
text = 'Python      Exercises' 
print(re.sub(r' +',' ',text))       
Output -- Python Exercises
----------------------------------------------------------
# to remove all whitespaces from a string
text = 'Py th on      Ex erc ises'
print(re.sub(r'\s+',' ',text))      # so here \s is for whitespaces
Output -- Python Exercises
----------------------------------------------------------
# to remove everything except alphanumeric characters from a string  
import re  
text = '**//_Python Exercises// - 12.$$#5^^^ '
print(re.sub(r'[\W_]+',' ',text))     #Here [ ] means include operation \W_ for alphanumeric characters (a-z 0-9) is called  alphanumeric
Output --
 Python Exercises 12 5 
----------------------------------------------------------
# to find urls in a string
import re  
text = '<p>Contents :</p><a href="http://w3resource.com">Python Examples</a><a href="http://github.com">Even More Examples</a>'
print(re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),])+',text))
Output -- ['http://w3resource.com', 'http://github.com']
----------------------------------------------------------
# to split a string at uppercase letters
import re  
text = "PythonTutorialandExercises"
print(re.findall('[A-Z][^A-Z]*', text))     #['Python', 'Tutorialand', 'Exercises']
print(re.split('[A-Z]*',text))              #['', 'ython', 'utorialand', 'xercises']
----------------------------------------------------------
# to do a case-insensitive string replacement.
import re
text = "Java Excercise"
o = re.compile(re.escape("JavA") , re.IGNORECASE)  #here we dont know case of Java word so split at case-insensitive word
#complie creates re object . 
print(o.sub('newJava',text))  #now o is re. object so use sub function on o , not re.sub . Output newJava Excercise
----------------------------------------------------------
# to remove the ANSI escape sequences from a string.
import re
text = "\t\u001b[0;35mgoogle.com\u001b[0m \u001b[0;36m216.58.218.206\u001b[0m"
print("Original Text: ",text)
reaesc = re.compile(r'\x1b[^m]*m')
new_text = reaesc.sub('', text)
print("New Text:      ",new_text)
Output -- 
('Original Text: ', '\t\\u001b[0;35mgoogle.com\\u001b[0m \\u001b[0;36m216.58.218.206\\u001b[0m')
('New Text:      ', '\t\\u001b[0;35mgoogle.com\\u001b[0m \\u001b[0;36m216.58.218.206\\u001b[0m')
----------------------------------------------------------
# to find all adverbs and their positions in a given sentence  
Sample text : "Clearly, he has no excuse for such behavior."  
import re
text = "Clearly, he has no excuse for such behavior."
word = re.search(r'\w+ly',text)
print(word.group(0),word.start())
---second apparoach - 
for m in re.finditer(r"\w+ly", text):
    print('%d-%d: %s' % (m.start(), m.end(), m.group(0)))
Output -- 0-7: Clearly
----------------------------------------------------------
# to split a string with multiple delimiters
text = 'The quick brown\nfox jumps*over the lazy dog.'
print(re.split('; |, |\*|\n',text))
Output -- ['The quick brown', 'fox jumps', 'over the lazy dog.']
----------------------------------------------------------
# to check a decimal with a precision of 2.
def is_decimal(num):
    import re
    dnumre = re.compile(r"""^[0-9]+(\.[0-9]{1,2})?$""")
    result = dnumre.search(num)
    return bool(result)
print(is_decimal('123.11'))     # True
print(is_decimal('123.1'))      # True
print(is_decimal('123'))        # True
print(is_decimal('0.21'))       # True

print(is_decimal('123.1214'))   #False
print(is_decimal('3.124587'))   #False
print(is_decimal('e666.86'))    #False





